[
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    previous = base\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    previous = term(base)\r\n    previous = base\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    previous = term(base)\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        if n==n:\r\n            result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        if n==True:\r\n        if n==n:\r\n            result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        if n==True:\r\n            result = combiner(result, term(k))\r\n        k += 1\r\n    return result"
  }, 
  {
    "added": [
      4, 
      5, 
      6, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            5
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            4
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))        return combiner(base, term(n))\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    if combiner==add:\r\n        total = total-1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            7
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            6
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    if combiner==add:\r\n        total = total-1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return base+total    return combiner(base, total)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    if combiner==add:\r\n        total = total-1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return base+total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    result = start\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    result = base\r\n    while n>0:\r\n        result = combiner(result, term(counter))\r\n        n -= 1\r\n        counter += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            9
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            8
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    result = start\r\n    result = base\r\n    while n>0:\r\n        result = combiner(result, term(counter))\r\n        n -= 1\r\n        counter += 1\r\n    return result", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    result = start\r\n    while n>0:\r\n        result = combiner(result, term(counter))\r\n        n -= 1\r\n        counter += 1\r\n    return result"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            11
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            10
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n < 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            13
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            12
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    ret = start\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    ret = base\r\n    for i in range(1, n+1, 1):\r\n        ret = combiner(ret, term(i))\r\n    return ret", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            15
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            14
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    ret = start\r\n    ret = base\r\n    for i in range(1, n+1, 1):\r\n        ret = combiner(ret, term(i))\r\n    return ret", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    ret = start\r\n    for i in range(1, n+1, 1):\r\n        ret = combiner(ret, term(i))\r\n    return ret"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if term(n)==base:\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if term(n)==base:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            17
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            16
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if term(n)==base:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if term(n)==base:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n3\n\n# Error: expected\n#     15\n# but got\n#     3", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            18
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 3, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    if k<=n:\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n        return combiner(total, term(k))    return total", 
    "removed": [
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    if k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n        return combiner(total, term(k))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in prtii\n    return combiner(term(n), prtii(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in prtii\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def prtii(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), prtii(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, prtii(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            23
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def prtii(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), prtii(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, prtii(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def prtii(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), prtii(combiner, n-1, term))\r\n    return combiner(base, prtii(combiner, n, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    if n==0:\r\n        return base\r\n    while n>1:\r\n        x = combiner(x, term(n))\r\n        n -= 1\r\n    return combiner(x, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    if n==0:\r\n        return base\r\n    while n>1:\r\n        x = combiner(x, term(n))\r\n        n -= 1\r\n    return combiner(x, base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    while n>1:\r\n        x = combiner(x, term(n))\r\n        n -= 1\r\n    return combiner(x, base)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_fuzzies(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(n), accumulate_fuzzies(combiner, base, n-1, term))\r\n    return accumulate_fuzzies(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            27
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            26
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_fuzzies(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(n), accumulate_fuzzies(combiner, base, n-1, term))\r\n    accumulate_fuzzies(combiner, base, n, term)    return accumulate_fuzzies(combiner, base, n, term)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_fuzzies(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(n), accumulate_fuzzies(combiner, base, n-1, term))\r\n    accumulate_fuzzies(combiner, base, n, term)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def base_sequence(combiner, n, term):\r\n        if n<2:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), base_sequence(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, base_sequence(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            26
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def base_sequence(combiner, n, term):\r\n        if n<2:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), base_sequence(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, base_sequence(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def base_sequence(combiner, n, term):\r\n        if n<2:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), base_sequence(combiner, n-1, term))\r\n    return combiner(base, base_sequence(combiner, n, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in find_value\n    return find_value(combiner, base, n-1, term, combiner(value,term(n-1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in find_value\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    value = term(n)\r\n    if n==0:\r\n        return base\r\n    def find_value(combiner, base, n, term, value):\r\n        if n==1:\r\n            return combiner(base, value)\r\n        else:\r\n            return find_value(combiner, base, n-1, term, combiner(value, term(n-1)))\r\n    return find_value(combiner, base, n, term, value)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    value = term(n)\r\n    if n==0:\r\n        return base\r\n    def find_value(combiner, base, n, term, value):\r\n        if n==1:\r\n            return combiner(base, value)\r\n        else:\r\n            return find_value(combiner, base, n-1, term, combiner(value, term(n-1)))\r\n    return find_value(combiner, base, n, term, value)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    value = term(n)\r\n    def find_value(combiner, base, n, term, value):\r\n        if n==1:\r\n            return combiner(base, value)\r\n        else:\r\n            return find_value(combiner, base, n-1, term, combiner(value, term(n-1)))\r\n    return find_value(combiner, base, n, term, value)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    base = base\r\n    while n>0:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            23
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    base = 0\r\n    base = base\r\n    while n>0:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    base = 0\r\n    while n>0:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base"
  }, 
  {
    "added": [
      2, 
      3, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(1)\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(1)\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)\r\nfrom operator import add, mul        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(1)\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total = total + combiner(total, term(n))\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            30
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(total, base)\r\n        return combiner(base, term(n))\r\n    else:\r\n        total = total+combiner(total, term(n))\r\n        return accumulate(combiner, base, n-1, term, 0)        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      4, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(total, base)\r\n    else:\r\n        total = total+combiner(total, term(n))\r\n        return accumulate(combiner, base, n-1, term, 0)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            32
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            34
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n73\n\n# Error: expected\n#     72\n# but got\n#     73", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term, total):\r\n        if n==0:\r\n            return total\r\n        elif total==1:\r\n            return total+n\r\n        else:\r\n            total = combiner(total, term(n))\r\n            return helper(combiner, base, n-1, term, total)\r\n    return helper(combiner, base, n, term, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            35
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 73, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term, total):\r\n        if n==0:\r\n            return total\r\n        elif n==1:\r\n        elif total==1:\r\n            return total+n\r\n        else:\r\n            total = combiner(total, term(n))\r\n            return helper(combiner, base, n-1, term, total)\r\n    return helper(combiner, base, n, term, base)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term, total):\r\n        if n==0:\r\n            return total\r\n        elif n==1:\r\n            return total+n\r\n        else:\r\n            total = combiner(total, term(n))\r\n            return helper(combiner, base, n-1, term, total)\r\n    return helper(combiner, base, n, term, base)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n==0 or combiner==1):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n==0 or n==1):\r\n    if (n==0 or combiner==1):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n==0 or n==1):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return identity(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return identity(base)\r\n    else:\r\n        return combiner(base, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return identity(base)\r\n    else:\r\n        return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in rec_n\n    return combiner(term(n), rec_n((n-1), term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in rec_n\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def rec_n(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), rec_n((n-1), term))\r\n    return combiner(base, rec_n(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            42
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def rec_n(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), rec_n((n-1), term))\r\n    return combiner(base, rec_n(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def rec_n(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), rec_n((n-1), term))\r\n    return combiner(base, rec_n(n, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    sum, k = combiner(term(k), sum), i+1\nUnboundLocalError: local variable 'k' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    sum, i = base, 1\r\n    while i<=n:\r\n        sum, i = combiner(term(i), sum), i+1\r\n    return sum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    sum, i = base, 1\r\n    while i<=n:\r\n        sum, k = combiner(term(k), sum), i+1\r\n        sum, i = combiner(term(i), sum), i+1\r\n    return sum", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    sum, i = base, 1\r\n    while i<=n:\r\n        sum, k = combiner(term(k), sum), i+1\r\n    return sum"
  }, 
  {
    "added": [
      8, 
      12
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    while i<=n:\r\n        base = combiner(base, term(i))\r\n        i += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 11, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "stack_locals": [], 
        "line": 11, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 11, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        base = combiner(base, term(i))\r\n        i += 1\r\n    return total\r\nfrom operator import add, mul    return base", 
    "removed": [
      7, 
      10, 
      11
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      8, 
      11
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n645\n\n# Error: expected\n#     15\n# but got\n#     645", 
    "after": "def accumulate(combiner, base, n, term):\r\n    sum = base\r\n    for x in range(1, n+1):\r\n        if term==square:\r\n            x = x**2\r\n        if term==triple:\r\n            x = x**3\r\n        if combiner==add:\r\n            sum += x\r\n        if combiner==mul:\r\n            sum *= x\r\n    return sum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 645, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    sum = base\r\n    for x in range(1, n+1):\r\n        if term==square:\r\n            x = x**2\r\n        if term==triple:\r\n            x = x**3\r\n        if add:\r\n        if combiner==add:\r\n            sum += x\r\n        if mul:\r\n        if combiner==mul:\r\n            sum *= x\r\n    return sum", 
    "removed": [
      7, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    sum = base\r\n    for x in range(1, n+1):\r\n        if term==square:\r\n            x = x**2\r\n        if term==triple:\r\n            x = x**3\r\n        if add:\r\n            sum += x\r\n        if mul:\r\n            sum *= x\r\n    return sum"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in sequence\n    return combiner(term(n), sequence(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in sequence\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def sequence(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), sequence(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, sequence(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def sequence(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), sequence(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, sequence(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def sequence(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), sequence(combiner, n-1, term))\r\n    return combiner(base, sequence(combiner, n, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(total, k)\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(total, k)\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n<1):\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n<1):\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n<1):\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in accumulate\n    return combiner(base,helper)\nTypeError: unsupported operand type(s) for +: 'int' and 'function'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return n\r\n        elif n==0:\r\n            return 0\r\n        return combiner(term(n), helper(n-1, term))\r\n    return combiner(base, helper(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            42
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return n\r\n        elif n==0:\r\n            return 0\r\n        return combiner(n, helper(n-1, term))\r\n    return combiner(base, helper)        return combiner(term(n), helper(n-1, term))\r\n    return combiner(base, helper(n, term))", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return n\r\n        elif n==0:\r\n            return 0\r\n        return combiner(n, helper(n-1, term))\r\n    return combiner(base, helper)"
  }, 
  {
    "added": [
      3, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 1\r\n    total = base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return combiner(base, total)    return total", 
    "removed": [
      2, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      4, 
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base, accumulate(combiner, base, k+1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    if k == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    if k==n:\r\n        return term(n)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, k+1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2, 
      3, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    if k==n:\r\n        return term(n)\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, k+1, term))"
  }, 
  {
    "added": [], 
    "log": ">>> accumulate(add, 11, 3, square)   t# 11 + 1^2 + 2^2 + 3^2\nTraceback (most recent call last):\n    accumulate(add, 11, 3, square)   t# 11 + 1^2 + 2^2 + 3^2\n                                     ^\nSyntaxError: invalid syntax\n\n# Error: expected\n#     25\n# but got\n#     SyntaxError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = term(k)\r\n    if n==0:\r\n        return base\r\n    while k<n:\r\n        k, total = k+1, combiner(total, term(k+1))\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            35
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = term(k)\r\n    if n==0:\r\n        return base\r\n    while k<n:\r\n        k, total = k+1, combiner(total, term(k+1))\r\n    return combiner(base, total)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = term(k)\r\n    if n==0:\r\n        return base\r\n    while k<n:\r\n        k, total = k+1, combiner(total, term(k+1))\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3, 
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            34
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if base<n:\r\n        return term(base)+accumulate(combiner, base+1, n, term)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return base        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      1, 
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if base<n:\r\n        return term(base)+accumulate(combiner, base+1, n, term)\r\n    else:\r\n        return base"
  }, 
  {
    "added": [
      6, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def term_output(n):\r\n        return term(n)\r\n    total, i = term_output(base), 1\r\n    while i<=n:\r\n        base = combiner(base, term_output(i))\r\n        i += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            32
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def term_output(n):\r\n        return term(n)\r\n    total, i = term_output(base), 1\r\n    while i<=n:\r\n        total = combiner(total, term_output(i))\r\n        base = combiner(base, term_output(i))\r\n        i += 1\r\n    return total    return base", 
    "removed": [
      5, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def term_output(n):\r\n        return term(n)\r\n    total, i = term_output(base), 1\r\n    while i<=n:\r\n        total = combiner(total, term_output(i))\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            30
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, x = base, 1\r\n    while x<=n:\r\n        total, x = combiner(total, term(x)), x+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, x = base, 1\r\n    while x<=n:\r\n        total, x = combiner(base, term(x)), x+1\r\n        total, x = combiner(total, term(x)), x+1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, x = base, 1\r\n    while x<=n:\r\n        total, x = combiner(base, term(x)), x+1\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            54
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n15\n\n# Error: expected\n#     72\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1 or n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            55
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1 or n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1 or n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            56
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n63\n\n# Error: expected\n#     72\n# but got\n#     63", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            57
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 63, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), accumulate(add, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), accumulate(add, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for x in range(1, n+1):\r\n        result = combiner(result, term(x))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            58
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            58
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            58
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for x in range(0, n+1):\r\n    for x in range(1, n+1):\r\n        result = combiner(result, term(x))\r\n    return result\r\nfrom operator import add, mul    return result", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for x in range(0, n+1):\r\n        result = combiner(result, term(x))\r\n    return result\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_help\n    return combiner(term(n), accumulate_help(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate_help\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_help(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), accumulate_help(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_help(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            26
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_help(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), accumulate_help(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_help(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_help(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), accumulate_help(combiner, n-1, term))\r\n    return combiner(base, accumulate_help(combiner, n, term))"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(n, term):\r\n        counter = n-1\r\n        listen = [base]\r\n        if counter<0:\r\n            result = 0\r\n        else:\r\n            result = combiner(term(n), term(counter))\r\n        while counter>1:\r\n            counter -= 1\r\n            x = term(counter)\r\n            result = combiner(x, result)\r\n        return result\r\n    result = accumulate_helper(n, term)\r\n    return combiner(base, result)\r\n    print(listen)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            55
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(n, term):\r\n        counter = n-1\r\n        listen = [base]\r\n        if counter<0:\r\n            result = 0\r\n        else:\r\n            result = combiner(term(n), term(counter))\r\n        while counter>0:\r\n        while counter>1:\r\n            counter -= 1\r\n            x = term(counter)\r\n            result = combiner(x, result)\r\n        return result\r\n    result = accumulate_helper(n, term)\r\n    return combiner(base, result)\r\n    print(listen)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(n, term):\r\n        counter = n-1\r\n        listen = [base]\r\n        if counter<0:\r\n            result = 0\r\n        else:\r\n            result = combiner(term(n), term(counter))\r\n        while counter>0:\r\n            counter -= 1\r\n            x = term(counter)\r\n            result = combiner(x, result)\r\n        return result\r\n    result = accumulate_helper(n, term)\r\n    return combiner(base, result)\r\n    print(listen)"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n120\n\n# Error: expected\n#     15\n# but got\n#     120", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    def totaler(combiner, base, n, term, total):\r\n        if n>0:\r\n            return totaler(combiner, base, n-1, term, combiner(total, term(n)))\r\n        else:\r\n            return total\r\n    return totaler(combiner, base, n, term, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            59
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 120, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    total = base\r\n    def totaler(combiner, base, n, term, total):\r\n        if n>0:\r\n            return totaler(combiner, base, n-1, term, total*term(n))\r\n            return totaler(combiner, base, n-1, term, combiner(total, term(n)))\r\n        else:\r\n            return total\r\n    return totaler(combiner, base, n, term, total)", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    def totaler(combiner, base, n, term, total):\r\n        if n>0:\r\n            return totaler(combiner, base, n-1, term, total*term(n))\r\n        else:\r\n            return total\r\n    return totaler(combiner, base, n, term, total)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(i + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(i):\r\n        if i==n:\r\n            return combiner(base, term(i))\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return helper(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            61
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            60
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(i):\r\n        if i==n:\r\n            return combiner(base, term(i))\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return helper(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if i==n:\r\n            return combiner(base, term(i))\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return helper(1)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in accumulate\n    return combiner( base, counter(1) )\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     11\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def counter(k):\r\n        if k==n:\r\n            return term(k)\r\n        elif k<n:\r\n            return combiner(term(k), counter(k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, counter(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            62
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            18
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def counter(k):\r\n        if k==n:\r\n            return term(k)\r\n        elif k<n:\r\n            return combiner(term(k), counter(k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, counter(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def counter(k):\r\n        if k==n:\r\n            return term(k)\r\n        elif k<n:\r\n            return combiner(term(k), counter(k+1))\r\n    return combiner(base, counter(1))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            64
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            63
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, term(n-1))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, term(n-1))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n),accumulate(combiner,base,(n-1),term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n),accumulate(combiner,base,(n-1),term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n),accumulate(combiner,base,(n-1),term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n),accumulate(combiner,base,(n-1),term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            65
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, (n-1), term))        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, (n-1), term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(base, n - 1, term))\nTypeError: accumulate() missing 1 required positional argument: 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            35
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            67
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(base, n-1, term))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(n), helper(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in helper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, helper(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            68
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, helper(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(combiner, n-1, term))\r\n    return combiner(base, helper(combiner, n, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in counter\n    return combiner(term(i),counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in counter\n    if i==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    i = 1\r\n    def counter(i):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    return combiner(base, counter(i))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    i = 1\r\n    def counter(i):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    return combiner(base, counter(i))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    def counter(i):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    return combiner(base, counter(i))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    total = combinder(total, term(count))\nNameError: name 'combinder' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = base\r\n    while count<=n:\r\n        total = combiner(total, term(count))\r\n        count += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = base\r\n    while count<=n:\r\n        total = combinder(total, term(count))\r\n        total = combiner(total, term(count))\r\n        count += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = base\r\n    while count<=n:\r\n        total = combinder(total, term(count))\r\n        count += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(n_helper, n_helper(n-1))\nUnboundLocalError: local variable 'n_helper' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    def n_helper(base, n, term, r):\r\n        if r>=n:\r\n            return 0\r\n        else:\r\n            return term(r)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n_helper, n_helper(n-1))\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    def n_helper(base, n, term, r):\r\n        if r>=n:\r\n            return 0\r\n        else:\r\n            return term(r)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n_helper, n_helper(n-1))\r\n    def n_helper(base, n, term, r):\r\n        if r>=n:\r\n            return 0\r\n        else:\r\n            return term(r)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k = increment(k)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            77
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(base, term(k))\r\n        total = combiner(total, term(k))\r\n        k = increment(k)\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(base, term(k))\r\n        k = increment(k)\r\n    return total"
  }, 
  {
    "added": [
      2, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return iter_accumulate(1,increment)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in iter_accumulate\n    return combiner(term(x),iter_accumulate(increment(x)))\nTypeError: iter_accumulate() missing 1 required positional argument: 'increment'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def iter_accumulate(x):\r\n        if x>n:\r\n            return base\r\n        return combiner(term(x), iter_accumulate(increment(x)))\r\n    return iter_accumulate(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def iter_accumulate(x, increment):\r\n    def iter_accumulate(x):\r\n        if x>n:\r\n            return base\r\n        return combiner(term(x), iter_accumulate(increment(x)))\r\n    return iter_accumulate(1, increment)    return iter_accumulate(1)", 
    "removed": [
      1, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def iter_accumulate(x, increment):\r\n        if x>n:\r\n            return base\r\n        return combiner(term(x), iter_accumulate(increment(x)))\r\n    return iter_accumulate(1, increment)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return base+accumulate(combiner, base, n-1, term)    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    return base+accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner(total + term(k))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total+term(k))\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total+term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            84
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            83
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 1\r\n    return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 1\r\n    return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner, base, n - 1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(base, n+1):\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(base, n+1):\r\n        result = combiner(result, term(i))\r\n    return result"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n21\n\n# Error: expected\n#     15\n# but got\n#     21", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def count_comber(x):\r\n        if x==n+1:\r\n            return base\r\n        else:\r\n            return combiner(count_comber(x+1), term(x))\r\n    return count_comber(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 21, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def count_comber(x):\r\n        if x==n+1:\r\n            return combiner(base, x)\r\n            return base\r\n        else:\r\n            return combiner(count_comber(x+1), term(x))\r\n    return count_comber(1)", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def count_comber(x):\r\n        if x==n+1:\r\n            return combiner(base, x)\r\n        else:\r\n            return combiner(count_comber(x+1), term(x))\r\n    return count_comber(1)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(base, n-1, term))\nTypeError: accumulate() missing 1 required positional argument: 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            42
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))"
  }, 
  {
    "added": [
      9, 
      14
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        counter = 1\r\n        first = base\r\n        result = 0\r\n        while counter<=n:\r\n            result = combiner(first, term(counter))\r\n            first = result\r\n            counter += 1\r\n        return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 13, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "stack_locals": [], 
        "line": 13, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 13, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        counter = 1\r\n        first = base\r\n        result = 0\r\n        while counter<=n:\r\n            result = combiner(first, counter)\r\n            result = combiner(first, term(counter))\r\n            first = result\r\n            counter += 1\r\n        return result\r\nfrom operator import add, mul        return result", 
    "removed": [
      8, 
      12, 
      13
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        counter = 1\r\n        first = base\r\n        result = 0\r\n        while counter<=n:\r\n            result = combiner(first, counter)\r\n            first = result\r\n            counter += 1\r\n        return result\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n6\n\n# Error: expected\n#     15\n# but got\n#     6", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = 1\r\n    while y<=n:\r\n        x = combiner(x, term(y))\r\n        y += 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 6, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = 1\r\n    while x<=n:\r\n    while y<=n:\r\n        x = combiner(x, term(y))\r\n        y += 1\r\n    return x", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = 1\r\n    while x<=n:\r\n        x = combiner(x, term(y))\r\n        y += 1\r\n    return x"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    max_count = list(range(1, n+1))\r\n    i, total = 0, 0\r\n    if combiner==mul:\r\n        total = 1\r\n    while i<n:\r\n        total = combiner(term(max_count[i]), total)\r\n        i += 1\r\n    return combiner(total, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            34
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    max_count = list(range(1, n+1))\r\n    i, total = 0, 0\r\n    if combiner==mul:\r\n        total = 1\r\n    while i<n:\r\n        total = combiner(term(max_count[i]), total)\r\n        i += 1\r\n    return total+base    return combiner(total, base)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    max_count = list(range(1, n+1))\r\n    i, total = 0, 0\r\n    if combiner==mul:\r\n        total = 1\r\n    while i<n:\r\n        total = combiner(term(max_count[i]), total)\r\n        i += 1\r\n    return total+base"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            32
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==mul:\r\n        total, k = 1, 1\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            63
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 11, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "stack_locals": [], 
        "line": 11, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 11, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner==mul:\r\n        total, k = 1, 1\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n    return base+total\r\nfrom operator import add, mul    return combiner(base, total)", 
    "removed": [
      9, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner==mul:\r\n        total, k = 1, 1\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n    return base+total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))"
  }, 
  {
    "added": [
      3, 
      4, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            59
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))\r\nfrom operator import add, mul        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      1, 
      2, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    sum2 = 0\r\n    sum3 = 1\r\n    if combiner==add:\r\n        while k<=n:\r\n            sum2 = sum2+term(k)\r\n            k += 1\r\n        return base+sum2\r\n    if combiner==mul:\r\n        while k<=n:\r\n            sum3 = sum3*term(k)\r\n            k += 1\r\n        return base*sum3", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            86
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            23
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 0\r\n    k = 1\r\n    sum2 = 0\r\n    sum3 = 1\r\n    if combiner==add:\r\n        while k<=n:\r\n            sum2 = sum2+term(k)\r\n            k += 1\r\n        return base+sum2\r\n    if combiner==mul:\r\n        while k<=n:\r\n            sum3 = sum3*term(k)\r\n            k += 1\r\n        return base*sum3", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 0\r\n    sum2 = 0\r\n    sum3 = 1\r\n    if combiner==add:\r\n        while k<=n:\r\n            sum2 = sum2+term(k)\r\n            k += 1\r\n        return base+sum2\r\n    if combiner==mul:\r\n        while k<=n:\r\n            sum3 = sum3*term(k)\r\n            k += 1\r\n        return base*sum3"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n16\n\n# Error: expected\n#     72\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            56
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            87
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base += term(n)\r\n        n -= 1\r\n        return accumulate(combiner, base, n, term)        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      4, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base += term(n)\r\n        n -= 1\r\n        return accumulate(combiner, base, n, term)"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def acc_help(combiner, total, k, term):\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n        if k>n:\r\n            return total\r\n        else:\r\n            return acc_help(combiner, total, k, term)\r\n    if n==0:\r\n        return base\r\n    return acc_help(combiner, base, 1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            84
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def acc_help(combiner, total, k, term):\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n        if k>n:\r\n            return total\r\n        else:\r\n            return acc_help(combiner, total, k, term)\r\n    if n==0:\r\n        return base\r\n    return acc_help(combiner, base, 1, term)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def acc_help(combiner, total, k, term):\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n        if k>n:\r\n            return total\r\n        else:\r\n            return acc_help(combiner, total, k, term)\r\n    return acc_help(combiner, base, 1, term)"
  }, 
  {
    "added": [
      2, 
      3, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k, final_value = 2, term(1)\r\n    if n==0:\r\n        return base\r\n    while k<=n:\r\n        final_value = combiner(final_value, term(k))\r\n        k += 1\r\n    return combiner(base, final_value)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            89
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            88
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            88
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            88
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k, final_value = 2, term(1)\r\n    if n==0:\r\n        return base\r\n    while k<=n:\r\n        final_value = combiner(final_value, term(k))\r\n        k += 1\r\n    return combiner(base, final_value)\r\nfrom operator import add, mul    return combiner(base, final_value)", 
    "removed": [
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k, final_value = 2, term(1)\r\n    while k<=n:\r\n        final_value = combiner(final_value, term(k))\r\n        k += 1\r\n    return combiner(base, final_value)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            91
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            90
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n30\n\n# Error: expected\n#     15\n# but got\n#     30", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for n in range(n):\r\n        total = combiner(total, term(n+1))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            86
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            86
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            86
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 30, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for x in range(n):\r\n    for n in range(n):\r\n        total = combiner(total, term(n+1))\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for x in range(n):\r\n        total = combiner(total, term(n+1))\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total = base):\r\n        if n==1:\r\n            return base+1\r\n        if k==n+1:\r\n            return total\r\n        if k>=1:\r\n            total = combiner(total, term(k))\r\n            return helper(k+1, total)\r\n    return helper(1, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            60
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total = base):\r\n        if n==1:\r\n            return base+1\r\n        if k==n:\r\n        if k==n+1:\r\n            return total\r\n        if k>=1:\r\n            total = combiner(total, term(k))\r\n            return helper(k+1, total)\r\n    return helper(1, base)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total = base):\r\n        if n==1:\r\n            return base+1\r\n        if k==n:\r\n            return total\r\n        if k>=1:\r\n            total = combiner(total, term(k))\r\n            return helper(k+1, total)\r\n    return helper(1, base)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in times\n    return combiner(term(x),times(increment(x)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in times\n    if x==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def times(x):\r\n        if x==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(x), times(increment(x)))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, times(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def times(x):\r\n        if x==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(x), times(increment(x)))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, times(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def times(x):\r\n        if x==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(x), times(increment(x)))\r\n    return combiner(base, times(1))"
  }, 
  {
    "added": [
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return helper (k+1, total)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in helper\n    if n == k:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total):\r\n        if n==k:\r\n            return combiner(term(k), total)\r\n        else:\r\n            total = combiner(term(k), total)\r\n        return helper(k+1, total)\r\n    if n==0:\r\n        return base\r\n    return helper(1, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            64
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            63
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total):\r\n        if n==k:\r\n            return combiner(term(k), total)\r\n        else:\r\n            total = combiner(term(k), total)\r\n        return helper(k+1, total)\r\n    if n==0:\r\n        return base\r\n    return helper(1, base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(k, total):\r\n        if n==k:\r\n            return combiner(term(k), total)\r\n        else:\r\n            total = combiner(term(k), total)\r\n        return helper(k+1, total)\r\n    return helper(1, base)"
  }, 
  {
    "added": [
      5, 
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n\n# Error: expected\n#     11\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    elif not (n<=0):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    if n==0:\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            32
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    elif not (n<=0):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    if n==0:\r\n        return base", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    elif not (n<=0):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n81\n\n# Error: expected\n#     26\n# but got\n#     81", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            68
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            33
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 81, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while 1<=n:\r\n        total = combiner(total, term(n))\r\n        n = n-1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while 1<=n:\r\n        total = combiner(total, n)\r\n        total = combiner(total, term(n))\r\n        n = n-1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while 1<=n:\r\n        total = combiner(total, n)\r\n        n = n-1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    t, i = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t"
  }, 
  {
    "added": [
      2, 
      10
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    else:\r\n        while n>0:\r\n            total = combiner(term(n), total)\r\n            n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    total = base\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    else:\r\n        while n>0:\r\n            total = combiner(term(n), total)\r\n            n -= 1\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    else:\r\n        while n>0:\r\n            total = combiner(term(n), total)\r\n            n -= 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      4, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    b = base\r\n    c = combiner\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = c(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    b = base\r\n    c = combiner\r\n    total, k = 0, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = c(total, term(k)), k+1\r\n    return c(b, total)    return total", 
    "removed": [
      3, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    b = base\r\n    c = combiner\r\n    total, k = 0, 1\r\n    while k<=n:\r\n        total, k = c(total, term(k)), k+1\r\n    return c(b, total)"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    if combiner==mul:\r\n        finalResult = 1\r\n    elif combiner==add:\r\n        finalResult = 0\r\n    while i!=0:\r\n        finalResult = combiner(finalResult, term(i))\r\n        i -= 1\r\n    return combiner(finalResult, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    if combiner==mul:\r\n        finalResult = 1\r\n    elif combiner==add:\r\n        finalResult = 0\r\n    while i!=0:\r\n        finalProduct = combiner(finalResult, term(i))\r\n        finalResult = combiner(finalResult, term(i))\r\n        i -= 1\r\n    return combiner(finalResult, base)", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    if combiner==mul:\r\n        finalResult = 1\r\n    elif combiner==add:\r\n        finalResult = 0\r\n    while i!=0:\r\n        finalProduct = combiner(finalResult, term(i))\r\n        i -= 1\r\n    return combiner(finalResult, base)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    t, i = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base+term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            90
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base+term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, c = base, 1\r\n    while c<=n:\r\n        total, c = combiner(total, term(c)), c+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            93
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            92
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, c = 0, 1\r\n    total, c = base, 1\r\n    while c<=n:\r\n        total, c = combiner(total, term(c)), c+1\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, c = 0, 1\r\n    while c<=n:\r\n        total, c = combiner(total, term(c)), c+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      17
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(k):\r\n        if combiner==add:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)+helper(k+1)\r\n            else:\r\n                return term(k)\r\n        if combiner==mul:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)*helper(k+1)\r\n            else:\r\n                return term(k)\r\n    return combiner(base, helper(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            84
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            83
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(k):\r\n        if combiner==add:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)+helper(k+1)\r\n            else:\r\n                return term(k)\r\n        if combiner==mul:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)*helper(k+1)\r\n            else:\r\n                return term(k)\r\n    return base+helper(1)    return combiner(base, helper(1))", 
    "removed": [
      16
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(k):\r\n        if combiner==add:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)+helper(k+1)\r\n            else:\r\n                return term(k)\r\n        if combiner==mul:\r\n            if n==0:\r\n                return 0\r\n            elif k<n:\r\n                return term(k)*helper(k+1)\r\n            else:\r\n                return term(k)\r\n    return base+helper(1)"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n108\n\n# Error: expected\n#     72\n# but got\n#     108", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n        return total\r\n    else:\r\n        total, k = 0, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n        return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            95
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            94
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 108, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n        return total\r\n    else:\r\n        total, k = 1, 1\r\n        total, k = 0, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n        return total", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total+term(k), k+1\r\n        return total\r\n    else:\r\n        total, k = 1, 1\r\n        total += base\r\n        while k<=n:\r\n            total, k = total*term(k), k+1\r\n        return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = combiner(base, term(n))\r\n    while n>1:\r\n        n -= 1\r\n        total = combiner(total, term(n))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    total = combiner(base, term(n))\r\n    while n>0:\r\n    while n>1:\r\n        n -= 1\r\n        total = combiner(total, term(n))\r\n    return total", 
    "removed": [
      1, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    total = combiner(base, term(n))\r\n    while n>0:\r\n        n -= 1\r\n        total = combiner(total, term(n))\r\n    return total"
  }, 
  {
    "added": [
      3, 
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return combiner(base, term(n))        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return combiner(base, term(n))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    z = base\r\n    for x in range(1, n+1):\r\n        z = combiner(z, term(x))\r\n    return z", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    z = 1\r\n    z = base\r\n    for x in range(1, n+1):\r\n        z = combiner(z, term(x))\r\n    return z", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    z = 1\r\n    for x in range(1, n+1):\r\n        z = combiner(z, term(x))\r\n    return z"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total, k = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     26\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    result = base\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = base\r\n    result = 0\r\n    i = 1\r\n    result = base\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return result", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = base\r\n    result = 0\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return result"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    acc = base\r\n    for i in range(n):\r\n        acc = combiner(acc, term(i+1))\r\n    return acc", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    acc = base\r\n    for i in range(n+1):\r\n        acc = combiner(acc, term(i))\r\n    for i in range(n):\r\n        acc = combiner(acc, term(i+1))\r\n    return acc", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    acc = base\r\n    for i in range(n+1):\r\n        acc = combiner(acc, term(i))\r\n    return acc"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def total(m):\r\n        if m==0:\r\n            return base\r\n        else:\r\n            return combiner(term(m), total(m-1))\r\n    return total(n)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            67
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            68
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def total(m):\r\n        if m==0:\r\n            return base\r\n        else:\r\n            return combiner(term(m), total(m-1))\r\n    return total(1)    return total(n)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def total(m):\r\n        if m==0:\r\n            return base\r\n        else:\r\n            return combiner(term(m), total(m-1))\r\n    return total(1)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            65
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      5, 
      10
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 0\r\n    def function(x):\r\n        def another(n):\r\n            total = base\r\n            while n>0:\r\n                total = combiner(total, term(n))\r\n                n -= 1\r\n            return total\r\n        return another(n)\r\n    return function(x)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            30
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 0\r\n    def function(x):\r\n        def another(n):\r\n            total = 0\r\n            total = base\r\n            while n>0:\r\n                total = combiner(total, term(n))\r\n                n -= 1\r\n            return combiner(base, total)\r\n            return total\r\n        return another(n)\r\n    return function(x)", 
    "removed": [
      4, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 0\r\n    def function(x):\r\n        def another(n):\r\n            total = 0\r\n            while n>0:\r\n                total = combiner(total, term(n))\r\n                n -= 1\r\n            return combiner(base, total)\r\n        return another(n)\r\n    return function(x)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(accumulate(combiner, base, k-1, term), term(k))\r\n        k = k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            62
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(term(k-1), term(k))\r\n        total = combiner(accumulate(combiner, base, k-1, term), term(k))\r\n        k = k+1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(term(k-1), term(k))\r\n        k = k+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            60
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      1, 
      2, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return term(1)\r\n    elif combiner==add:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\r\n    elif combiner==mul:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 1, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            55
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return term(1)\r\n    elif combiner==add:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\r\n    elif combiner==mul:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 1, n-1, term))\r\nfrom operator import add, mul        return combiner(combiner(base, term(n)), accumulate(combiner, 1, n-1, term))", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(1)\r\n    elif combiner==add:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 0, n-1, term))\r\n    elif combiner==mul:\r\n        return combiner(combiner(base, term(n)), accumulate(combiner, 1, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            26
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            94
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return term(n)\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            83
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            84
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term))        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            89
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            93
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            93
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            93
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def sum_function(n):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            n = n-1\r\n            return combiner(term(n+1), sum_function(n))\r\n    return sum_function(n)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            26
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def sum_function(n):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            n = n-1\r\n            return combiner(term(n+1), sum_function(n))            return combiner(term(n+1), sum_function(n))\r\n    return sum_function(n)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def sum_function(n):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            n = n-1\r\n            return combiner(term(n+1), sum_function(n))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n18\n\n# Error: expected\n#     72\n# but got\n#     18", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, i = 0, 1\r\n    if combiner==mul:\r\n        total = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return combiner(total, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            55
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            24
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 18, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, i = 0, 1\r\n    if combiner==mul:\r\n        total = 1\r\n    while i<=n:\r\n        if combiner==mul:\r\n            total = 1\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return combiner(total, base)", 
    "removed": [
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, i = 0, 1\r\n    while i<=n:\r\n        if combiner==mul:\r\n            total = 1\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return combiner(total, base)"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def combiner_helper(n):\r\n        if n==0:\r\n            return 0\r\n        elif n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), combiner_helper(n-1))\r\n    return combiner(combiner_helper(n), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            23
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def combiner_helper(n):\r\n        if n==0:\r\n            return 0\r\n        elif n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), combiner_helper(n-1))\r\n    return combiner_helper(n)+base    return combiner(combiner_helper(n), base)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def combiner_helper(n):\r\n        if n==0:\r\n            return 0\r\n        elif n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), combiner_helper(n-1))\r\n    return combiner_helper(n)+base"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    for i in range(1, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            60
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    for i in range(base, n+1):\r\n    for i in range(1, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    for i in range(base, n+1):\r\n        base = combiner(base, term(i))\r\n    return base"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            19
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            20
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    total = total * combiner(x, term(i))\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    x = base\r\n    while i<n:\r\n        i = i+1\r\n        x = combiner(x, term(i))\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            30
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    x = base\r\n    while i<n:\r\n        i = i+1\r\n        total = total*combiner(x, term(i))\r\n        x = combiner(x, term(i))\r\n    return x", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    x = base\r\n    while i<n:\r\n        i = i+1\r\n        total = total*combiner(x, term(i))\r\n    return x"
  }, 
  {
    "added": [
      4, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n<built-in function add>\n\n# Error: expected\n#     15\n# but got\n#     <built-in function add>", 
    "after": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    i = 1\r\n    while i<=n:\r\n        start = combiner(start, term(i))\r\n        i += 1\r\n    return start", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            65
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    i = 1\r\n    while i<n:\r\n    while i<=n:\r\n        start = combiner(start, term(i))\r\n        i += 1\r\n    return combiner    return start", 
    "removed": [
      3, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    i = 1\r\n    while i<n:\r\n        start = combiner(start, term(i))\r\n        i += 1\r\n    return combiner"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            34
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            67
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    base = 1\r\n    while counter<=n:\r\n        total = combiner(term(counter), total)\r\n        counter += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    total = base\r\n    counter = 1\r\n    base = 1\r\n    while counter<=n:\r\n        total = combiner(term(counter), total)\r\n        counter += 1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    counter = 1\r\n    base = 1\r\n    while counter<=n:\r\n        total = combiner(term(counter), total)\r\n        counter += 1\r\n    return total"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_partial\n    return combiner(term(n), accumulate_partial(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate_partial\n    if n==2:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_partial(n, term):\r\n        if n==2:\r\n            return combiner(term(1), term(2))\r\n        else:\r\n            return combiner(term(n), accumulate_partial(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_partial(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_partial(n, term):\r\n        if n==2:\r\n            return combiner(term(1), term(2))\r\n        else:\r\n            return combiner(term(n), accumulate_partial(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_partial(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_partial(n, term):\r\n        if n==2:\r\n            return combiner(term(1), term(2))\r\n        else:\r\n            return combiner(term(n), accumulate_partial(n-1, term))\r\n    return combiner(base, accumulate_partial(n, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n21\n\n# Error: expected\n#     15\n# but got\n#     21", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total, combiner, base, n, term):\r\n        if n==0:\r\n            return total\r\n        else:\r\n            return helper(i+1, combiner(total, term(i)), combiner, base, n-1, term)\r\n    return helper(1, base, combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 21, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total, combiner, base, n, term):\r\n        if n==0:\r\n            return combiner(total, term(i))\r\n            return total\r\n        else:\r\n            return helper(i+1, combiner(total, term(i)), combiner, base, n-1, term)\r\n    return helper(1, base, combiner, base, n, term)", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total, combiner, base, n, term):\r\n        if n==0:\r\n            return combiner(total, term(i))\r\n        else:\r\n            return helper(i+1, combiner(total, term(i)), combiner, base, n-1, term)\r\n    return helper(1, base, combiner, base, n, term)"
  }, 
  {
    "added": [
      7, 
      8, 
      9, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulator(x, total):\r\n        if x>n:\r\n            return total\r\n        else:\r\n            return accumulator(x+1, combiner(total, term(x)))\r\n    return accumulator(0, combiner(base, term(1)))    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      1, 
      2, 
      3, 
      4, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulator(x, total):\r\n        if x>n:\r\n            return total\r\n        else:\r\n            return accumulator(x+1, combiner(total, term(x)))\r\n    return accumulator(0, combiner(base, term(1)))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            96
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            92
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate_helper\n    return combiner(term(num),accumulate_helper(num+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate_helper\n    if num == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(num):\r\n        if num==n:\r\n            return term(num)\r\n        else:\r\n            return combiner(term(num), accumulate_helper(num+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_helper(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            58
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            88
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(num):\r\n        if num==n:\r\n            return term(num)\r\n        else:\r\n            return combiner(term(num), accumulate_helper(num+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_helper(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(num):\r\n        if num==n:\r\n            return term(num)\r\n        else:\r\n            return combiner(term(num), accumulate_helper(num+1))\r\n    return combiner(base, accumulate_helper(1))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            94
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            97
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, (n-1), term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(base, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner(total, f(i))\nNameError: name 'f' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, f(i))\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, f(i))\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      2, 
      3, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    result = combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        result = combiner(term(n), result)\r\n    else:\r\n        result = combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        result = combiner(term(n), result)\r\n    else:\r\n        result = combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return result\r\nfrom operator import add, mul    return result", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n==1:\r\n        result = combiner(term(n), result)\r\n    else:\r\n        result = combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return result\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2, 
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    t, i = 1, 1\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = term(i)\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t*3    return t", 
    "removed": [
      1, 
      4, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    t, i = 1, 1\r\n    while i<=n:\r\n        t = term(i)\r\n        i += 1\r\n    return t*3"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    if n==0:\r\n        return total\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            34
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    if n==0:\r\n        return total\r\n    while i<=n:\r\n        total = combiner(total, i)\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    if n==0:\r\n        return total\r\n    while i<=n:\r\n        total = combiner(total, i)\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            31
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            66
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n    elif n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            18
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            29
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n    elif n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(base, term(n-1))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n    elif n==1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(base, term(n-1))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      8, 
      9, 
      10, 
      11, 
      12, 
      13
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    total = base\r\n    while a<=n:\r\n        total = combiner(total, term(a))\r\n        a += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            60
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            53
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def summation(term, n):\r\n        a, total = n, 0\r\n        while a>0:\r\n            total += term(a)\r\n            a -= 1\r\n        return total\r\n    return combiner(base, term(n))    a = 1\r\n    total = base\r\n    while a<=n:\r\n        total = combiner(total, term(a))\r\n        a += 1\r\n    return total", 
    "removed": [
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def summation(term, n):\r\n        a, total = n, 0\r\n        while a>0:\r\n            total += term(a)\r\n            a -= 1\r\n        return total\r\n    return combiner(base, term(n))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n<1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            21
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            22
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n<1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return combiner(base, n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def together(i):\r\n        if i<n:\r\n            return combiner(term(i), together(i+1))\r\n        else:\r\n            return combiner(base, term(n))\r\n    return together(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            56
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            87
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def together(i):\r\n        if i<n:\r\n            return combiner(term(i), together(i+1))\r\n        else:\r\n            return term(n)\r\n            return combiner(base, term(n))\r\n    return together(1)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def together(i):\r\n        if i<n:\r\n            return combiner(term(i), together(i+1))\r\n        else:\r\n            return term(n)\r\n    return together(1)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            97
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            25
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return start\nUnboundLocalError: local variable 'start' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            57
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            93
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return start\r\n        return base\r\n    else:\r\n        start = combiner(term(n), base)\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return start\r\n    else:\r\n        start = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            98
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            89
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            89
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            89
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), term(n-1))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n>0:\r\n        return combiner(term(n), term(n-1))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            100
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            99
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    return combiner(n, accumulate(combiner, base, n-1, term))        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n57\n\n# Error: expected\n#     15\n# but got\n#     57", 
    "after": "def accumulate(combiner, base, n, term):\r\n    s = base\r\n    for i in range(1, n+1):\r\n        s = combiner(s, term(i))\r\n    return s", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            68
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            101
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 57, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    s = base\r\n    for i in range(1, n+1):\r\n        s += combiner(s, term(i))\r\n        s = combiner(s, term(i))\r\n    return s", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    s = base\r\n    for i in range(1, n+1):\r\n        s += combiner(s, term(i))\r\n    return s"
  }, 
  {
    "added": [
      4, 
      10
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    value = term(1)\r\n    total = base\r\n    while value<=term(n):\r\n        counter += 1\r\n        total = combiner(total, value)\r\n        value = term(counter)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    value = term(1)\r\n    total = 0\r\n    total = base\r\n    while value<=term(n):\r\n        counter += 1\r\n        total = combiner(total, value)\r\n        value = term(counter)\r\n    return combiner(base, total)    return total", 
    "removed": [
      3, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    value = term(1)\r\n    total = 0\r\n    while value<=term(n):\r\n        counter += 1\r\n        total = combiner(total, value)\r\n        value = term(counter)\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    v = 0\r\n    if combiner==mul:\r\n        v = 1\r\n    while n>0:\r\n        v = combiner(v, term(x))\r\n        x = x+1\r\n        n = n-1\r\n    return combiner(v, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    v = 0\r\n    if combiner==mul:\r\n        v = 1\r\n    while n>0:\r\n        v = combiner(v, term(x))\r\n        x = x+1\r\n        n = n-1\r\n    return combiner(v, base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    v = 0\r\n    while n>0:\r\n        v = combiner(v, term(x))\r\n        x = x+1\r\n        n = n-1\r\n    return combiner(v, base)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n    return total\r\nfrom operator import add, mul        k += 1\r\n    return total", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return accumulate(combiner,base, n+1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n ==0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n+1, term)        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n+1, term)"
  }, 
  {
    "added": [
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        start = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)\r\nfrom operator import add, mul        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      4, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        start = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(i, term(i))\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(i, term(i))\r\n        i = i+1\r\n    return total"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 48, in total_comb\n    return total_comb(a+1, combiner(total, term(a+1)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in total_comb\n    if a == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def total_comb(a, total):\r\n        if a==n:\r\n            return combiner(total, base)\r\n        else:\r\n            return total_comb(a+1, combiner(total, term(a+1)))\r\n    if n==0:\r\n        return base\r\n    return total_comb(1, 1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def total_comb(a, total):\r\n        if a==n:\r\n            return combiner(total, base)\r\n        else:\r\n            return total_comb(a+1, combiner(total, term(a+1)))\r\n    if n==0:\r\n        return base\r\n    return total_comb(1, 1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def total_comb(a, total):\r\n        if a==n:\r\n            return combiner(total, base)\r\n        else:\r\n            return total_comb(a+1, combiner(total, term(a+1)))\r\n    return total_comb(1, 1)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    combiner(term(n),accumulate(combiner,base,n-1,term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            102
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            104
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            103
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            106
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            105
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, i)\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, i)\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner((accumulate(combiner, base, n - 1, term)),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner((accumulate(combiner, base, n-1, term)), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            108
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            107
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner((accumulate(combiner, base, n-1, term)), term(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner((accumulate(combiner, base, n-1, term)), term(n))"
  }, 
  {
    "added": [
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        i, result = 0, 0\r\n    else:\r\n        i, result = 1, 1\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return combiner(base, result)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            110
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            109
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        i, result = 0, 0\r\n    else:\r\n        i, result = 1, 1\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return base+result    return combiner(base, result)", 
    "removed": [
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        i, result = 0, 0\r\n    else:\r\n        i, result = 1, 1\r\n    while i<=n:\r\n        result = combiner(result, term(i))\r\n        i += 1\r\n    return base+result"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(n-1))\nTypeError: accumulate() missing 3 required positional arguments: 'base', 'n', and 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            112
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            111
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(n-1))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>0:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            114
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            113
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>0:\r\n        combiner(total, term(n))\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>0:\r\n        combiner(total, term(n))\r\n        n -= 1\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            116
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            115
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      4, 
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term_counter = 0\r\n    def term_combiner(combiner, term_counter, term):\r\n        if n==0:\r\n            return 0\r\n        if term_counter==n:\r\n            return term(term_counter)\r\n        return combiner(term_combiner(combiner, term_counter+1, term), term(term_counter))\r\n    return combiner(term_combiner(combiner, 1, term), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            117
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term_counter = 0\r\n    def term_combiner(combiner, term_counter, term):\r\n        if n==0:\r\n            return 0\r\n        if term_counter==n:\r\n            return term(term_counter)\r\n        return combiner(term_combiner(combiner, term_counter+1, term), term(term_counter))\r\n    return combiner(term_combiner(combiner, 0, term), base)    return combiner(term_combiner(combiner, 1, term), base)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term_counter = 0\r\n    def term_combiner(combiner, term_counter, term):\r\n        if term_counter==n:\r\n            return term(term_counter)\r\n        return combiner(term_combiner(combiner, term_counter+1, term), term(term_counter))\r\n    return combiner(term_combiner(combiner, 0, term), base)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulator(combiner, base, n - 1, term))\nNameError: name 'accumulator' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            121
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            121
          ]
        }, 
        "stack_locals": [], 
        "line": 5, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            121
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    return combiner(term(n), accumulator(combiner, base, n-1, term))\r\nfrom operator import add, mul    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    return combiner(term(n), accumulator(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = term(base)\r\n    total = base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = term(base)\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return total"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_function\n    return combiner(term(n), helper_function(combiner, base, n - 1, term))\nRecursionError: maximum recursion depth exceeded\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        def helper_function(combiner, base, n, term):\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n        return helper_function(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        def helper_function(combiner, base, n, term):\r\n            return combiner(term(n), helper_function(combiner, base, n-1, term))\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n        return helper_function(combiner, base, n, term)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        def helper_function(combiner, base, n, term):\r\n            return combiner(term(n), helper_function(combiner, base, n-1, term))\r\n        return helper_function(combiner, base, n, term)"
  }, 
  {
    "added": [
      6, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return term(n)+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return term(n)*accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "stack_locals": [], 
        "line": 9, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return n+accumulate(combiner, base, n-1, term)\r\n            return term(n)+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return n*accumulate(combiner, base, n-1, term)\r\nfrom operator import add, mul            return term(n)*accumulate(combiner, base, n-1, term)", 
    "removed": [
      5, 
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return n+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return n*accumulate(combiner, base, n-1, term)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3, 
      4, 
      5, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if combiner==add:\r\n            result = 0\r\n        if combiner==mul:\r\n            result = 1\r\n        if i<=n:\r\n            result = combiner(result, term(i))\r\n            return combiner(result, helper(i+1))\r\n        else:\r\n            return result\r\n    return combiner(base, helper(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        result = 0\r\n        if combiner==add:\r\n            result = 0\r\n        if combiner==mul:\r\n            result = 1\r\n        if i<=n:\r\n            result = combiner(result, term(i))\r\n            return combiner(result, helper(i+1))\r\n        else:\r\n            return result\r\n    return combiner(base, helper(1))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        result = 0\r\n        if i<=n:\r\n            result = combiner(result, term(i))\r\n            return combiner(result, helper(i+1))\r\n        else:\r\n            return result\r\n    return combiner(base, helper(1))"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    return combiner(base, term(n-1))        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n18\n\n# Error: expected\n#     72\n# but got\n#     18", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n<0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 18, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base or n<0:\r\n    if n==0 or n<0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base or n<0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n4\n3\n2\n15\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n>1:\r\n        print(n)\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "stack_locals": [], 
        "line": 9, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n>1:\r\n        print(n)\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return 1\r\nfrom operator import add, mul        return base", 
    "removed": [
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n>1:\r\n        print(n)\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return 1\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in accumulate\n    return helper_accumulate(1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper_accumulate\n    return combiner(term(k), helper_accumulate(k+1), term)\nTypeError: helper_accumulate() missing 1 required positional argument: 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper_accumulate(k, term):\r\n        if k>n:\r\n            return base\r\n        else:\r\n            return combiner(term(k), helper_accumulate(k+1, term))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return helper_accumulate(1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper_accumulate(k, term):\r\n        if k>n:\r\n            return base\r\n        else:\r\n            return combiner(term(k), helper_accumulate(k+1), term)\r\n            return combiner(term(k), helper_accumulate(k+1, term))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return helper_accumulate(1, term)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper_accumulate(k, term):\r\n        if k>n:\r\n            return base\r\n        else:\r\n            return combiner(term(k), helper_accumulate(k+1), term)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return helper_accumulate(1, term)"
  }, 
  {
    "added": [
      9, 
      10, 
      11, 
      12
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total+=accumulate (combiner, base, k, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    base>=0\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    base>=0\r\n    k = n\r\n    combiner = (term(n)+term(n-1))\r\n    while k>=0:\r\n        total += accumulate(combiner, base, k, term)\r\n        k -= 1\r\n    return total    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    base>=0\r\n    k = n\r\n    combiner = (term(n)+term(n-1))\r\n    while k>=0:\r\n        total += accumulate(combiner, base, k, term)\r\n        k -= 1\r\n    return total"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in main_function\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return main_function(combiner, base, n, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in main_function\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return main_function(combiner, base, n, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in main_function\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return main_function(combiner, base, n, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in main_function\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def main_function(combiner, base, n, term):\r\n        if n==0:\r\n            return term(n)+base\r\n        else:\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return main_function(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def main_function(combiner, base, n, term):\r\n        if n==1:\r\n        if n==0:\r\n            return term(n)+base\r\n        else:\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return main_function(combiner, base, n, term)", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def main_function(combiner, base, n, term):\r\n        if n==1:\r\n            return term(n)+base\r\n        else:\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return main_function(combiner, base, n, term)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner( base, accumulate(combiner, 0, n, term) )\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     15\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, 0, n, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, 0, n, term))"
  }, 
  {
    "added": [
      2, 
      3, 
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    return base + term(combiner(n))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    return base+term(combiner(n))    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    return base+term(combiner(n))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    k = 1\r\n    total = 1\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, term(k))\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    k = 1\r\n    total = 1\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, term(k))\r\n    return combiner(base, total)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = 1\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, term(k))\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in take_term\n    return combiner(function(i), take_term(i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in take_term\n    if(i == n):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def take_term(i, function):\r\n        if (i==n):\r\n            return function(i)\r\n        else:\r\n            return combiner(function(i), take_term(i+1, function))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, take_term(1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def take_term(i, function):\r\n        if (i==n):\r\n            return function(i)\r\n        else:\r\n            return combiner(function(i), take_term(i+1, function))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, take_term(1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def take_term(i, function):\r\n        if (i==n):\r\n            return function(i)\r\n        else:\r\n            return combiner(function(i), take_term(i+1, function))\r\n    return combiner(base, take_term(1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            138
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            137
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(1), accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(1), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            139
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    if n==0:\r\n        return base\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            140
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    if n==0:\r\n        return base\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      5, 
      6, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            143
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while base<=n:\r\n        total = combiner(total, term(base))\r\n        base += 1\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      2, 
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while base<=n:\r\n        total = combiner(total, term(base))\r\n        base += 1\r\n    return total"
  }, 
  {
    "added": [
      3, 
      4, 
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    if n==0:\r\n        return combiner(base, term(n))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    while i <= n:\nUnboundLocalError: local variable 'i' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i, total = 1, base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    index, total = 1, base\r\n    i, total = 1, base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    index, total = 1, base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      6, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    c = 1\r\n    if combiner==add:\r\n        total = 0\r\n        while c<=n:\r\n            total = total+term(c)\r\n            c = c+1\r\n        total = total+base\r\n    else:\r\n        total = 1\r\n        while c<=n:\r\n            total = total*term(c)\r\n            c = c+1\r\n        total = total*base\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    c = 1\r\n    if combiner==add:\r\n        total = 0\r\n        while c<=n:\r\n            combiner(total, term(c))\r\n            total = total+term(c)\r\n            c = c+1\r\n        combiner(total, base)\r\n        total = total+base\r\n    else:\r\n        total = 1\r\n        while c<=n:\r\n            total = total*term(c)\r\n            c = c+1\r\n        total = total*base\r\n    return total", 
    "removed": [
      5, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    c = 1\r\n    if combiner==add:\r\n        total = 0\r\n        while c<=n:\r\n            combiner(total, term(c))\r\n            c = c+1\r\n        combiner(total, base)\r\n    else:\r\n        total = 1\r\n        while c<=n:\r\n            total = total*term(c)\r\n            c = c+1\r\n        total = total*base\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def value(i):\r\n        if n==0:\r\n            return term(n)\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), value(i+1))\r\n    value = value(1)\r\n    return combiner(base, value)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    def value(i):\r\n        if n==0:\r\n            return term(i)\r\n            return term(n)\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), value(i+1))\r\n    value = value(1)\r\n    return combiner(base, value)", 
    "removed": [
      1, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    def value(i):\r\n        if n==0:\r\n            return term(i)\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), value(i+1))\r\n    value = value(1)\r\n    return combiner(base, value)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    ans = base\r\n    for n in range(1, n+1):\r\n        ans = combiner(ans, term(n))\r\n    return ans", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    ans = base\r\n    for i in range(1, n+1):\r\n    for n in range(1, n+1):\r\n        ans = combiner(ans, term(n))\r\n    return ans", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    ans = base\r\n    for i in range(1, n+1):\r\n        ans = combiner(ans, term(n))\r\n    return ans"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    output = accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n != 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n!=1:\r\n        output = accumulate(combiner, base, n-1, term)\r\n        return combiner(output, term(n))\r\n    else:\r\n        return combiner(base, term(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n!=1:\r\n        output = accumulate(combiner, base, n-1, term)\r\n        return combiner(output, term(n))\r\n    else:\r\n        return combiner(base, term(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n!=1:\r\n        output = accumulate(combiner, base, n-1, term)\r\n        return combiner(output, term(n))\r\n    else:\r\n        return combiner(base, term(1))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n36\n\n# Error: expected\n#     72\n# but got\n#     36", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if base>1:\r\n        product = base\r\n        base = 1\r\n    else:\r\n        product = term(base)\r\n        base += 1\r\n    while base<n+1:\r\n        product = combiner(product, term(base))\r\n        base += 1\r\n    return product", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 36, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if base>n:\r\n    if base>1:\r\n        product = base\r\n        base = 1\r\n    else:\r\n        product = term(base)\r\n        base += 1\r\n    while base<n+1:\r\n        product = combiner(product, term(base))\r\n        base += 1\r\n    return product", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if base>n:\r\n        product = base\r\n        base = 1\r\n    else:\r\n        product = term(base)\r\n        base += 1\r\n    while base<n+1:\r\n        product = combiner(product, term(base))\r\n        base += 1\r\n    return product"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n108\n\n# Error: expected\n#     72\n# but got\n#     108", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif combiner==1:\r\n        return term(1)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 108, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n    elif combiner==1:\r\n        return term(1)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return term(1)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      12
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        if combiner==add:\r\n            total += term(i)\r\n            i += 1\r\n        else:\r\n            total *= term(i)\r\n            i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 0\r\n    total = base\r\n    while i<=n:\r\n        if combiner==add:\r\n            total += term(i)\r\n            i += 1\r\n        else:\r\n            total *= term(i)\r\n            i += 1\r\n    return combiner(base, total)    return total", 
    "removed": [
      2, 
      11
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 0\r\n    while i<=n:\r\n        if combiner==add:\r\n            total += term(i)\r\n            i += 1\r\n        else:\r\n            total *= term(i)\r\n            i += 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    while 1<=n:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    while base<=n:\r\n    while 1<=n:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    while base<=n:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n<=0):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n<=1):\r\n    if (n<=0):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n<=1):\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    k = 0\r\n    while k<n:\r\n        total = total+combiner(term(k), term(k+1))\r\n        k = k+2\r\n    final_total = combiner(base, total)\r\n    return final_total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    k = 1\r\n    k = 0\r\n    while k<n:\r\n        total = total+combiner(term(k), term(k+1))\r\n        k = k+2\r\n    final_total = combiner(base, total)\r\n    return final_total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    k = 1\r\n    while k<n:\r\n        total = total+combiner(term(k), term(k+1))\r\n        k = k+2\r\n    final_total = combiner(base, total)\r\n    return final_total"
  }, 
  {
    "added": [
      3, 
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    if (n==0):\r\n        return identity(base)\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "stack_locals": [], 
        "line": 10, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 0\r\n    x = 1\r\n    if (n==0):\r\n        return identity(base)\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      2, 
      9, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 0\r\n    if (n==0):\r\n        return identity(base)\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n<1:\r\n        return total\r\n    else:\r\n        base = combiner(total, term(n))\r\n        return accumulate(combiner, base, (n-1), term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n<1:\r\n        return total\r\n    else:\r\n        total = combiner(total, term(n))\r\n        base = combiner(total, term(n))\r\n        return accumulate(combiner, base, (n-1), term)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n<1:\r\n        return total\r\n    else:\r\n        total = combiner(total, term(n))\r\n        return accumulate(combiner, base, (n-1), term)"
  }, 
  {
    "added": [
      5, 
      13
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    result = base\r\n    while i<=n:\r\n        if i>=1:\r\n            result = combiner(result, term(i))\r\n            i += 1\r\n        else:\r\n            result = combiner(term(i), term(i+1))\r\n            i += 2\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 12, 
        "globals": {
          "accumulate": [
            "REF", 
            157
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            157
          ]
        }, 
        "stack_locals": [], 
        "line": 12, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 12, 
        "globals": {
          "accumulate": [
            "REF", 
            157
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    result = base\r\n    while i<=n:\r\n        if i==1:\r\n        if i>=1:\r\n            result = combiner(result, term(i))\r\n            i += 1\r\n        else:\r\n            result = combiner(term(i), term(i+1))\r\n            i += 2\r\n    return result\r\nfrom operator import add, mul    return result", 
    "removed": [
      4, 
      11, 
      12
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    result = base\r\n    while i<=n:\r\n        if i==1:\r\n            result = combiner(result, term(i))\r\n            i += 1\r\n        else:\r\n            result = combiner(term(i), term(i+1))\r\n            i += 2\r\n    return result\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      10, 
      11
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        elif n==1:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return combiner(term(n), helper(combiner, base, n-1, term))\r\n    return helper(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "stack_locals": [], 
        "line": 10, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        elif n==1:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return helper(combiner, base, n-1, term)\r\n    return helper(combiner, base, n, term)\r\nfrom operator import add, mul            return combiner(term(n), helper(combiner, base, n-1, term))\r\n    return helper(combiner, base, n, term)", 
    "removed": [
      7, 
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        elif n==1:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return helper(combiner, base, n-1, term)\r\n    return helper(combiner, base, n, term)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    result = combine(result,term(k))\nNameError: name 'combine' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        result = combine(result, term(k))\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        result = combine(result, term(k))\r\n        k += 1\r\n    return result"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulate\n    return partial_product(1,base)\nNameError: name 'partial_product' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def partial_accum(k, accum):\r\n        if k==n+1:\r\n            return accum\r\n        else:\r\n            return partial_accum(k+1, combiner(accum, term(k)))\r\n    return partial_accum(1, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def partial_accum(k, accum):\r\n        if k==n+1:\r\n            return accum\r\n        else:\r\n            return partial_accum(k+1, combiner(accum, term(k)))\r\n    return partial_product(1, base)    return partial_accum(1, base)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def partial_accum(k, accum):\r\n        if k==n+1:\r\n            return accum\r\n        else:\r\n            return partial_accum(k+1, combiner(accum, term(k)))\r\n    return partial_product(1, base)"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<n+1:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 0\r\n    while k<n:\r\n    k = 1\r\n    while k<n+1:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 0\r\n    while k<n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k += 1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n37\n\n# Error: expected\n#     26\n# but got\n#     37", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 37, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return combiner(total, base)    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return combiner(total, base)"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(base, accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(base, accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(base, accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(base, accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(base, accumulate(combiner, base, n-1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return \r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return \r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, term(n))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, term(n))\r\n    if n==0:\r\n        return result\r\n        return base\r\n    else:\r\n        return combiner(result, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, term(n))\r\n    if n==0:\r\n        return result\r\n    else:\r\n        return combiner(result, term(n-1))"
  }, 
  {
    "added": [
      2, 
      3, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n81\n\n# Error: expected\n#     26\n# but got\n#     81", 
    "after": "def accumulate(combiner, base, n, term):\r\n    pre = base+1\r\n    a = 1\r\n    while (a<=n):\r\n        base = combiner(base, term(a))\r\n        pre += 1\r\n        a += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 81, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    pre = base+1\r\n    a = 1\r\n    while (a<=n):\r\n        base = combiner(base, term(pre))\r\n        base = combiner(base, term(a))\r\n        pre += 1\r\n        a += 1\r\n    return base", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    pre = base+1\r\n    a = 1\r\n    while (a<=n):\r\n        base = combiner(base, term(pre))\r\n        pre += 1\r\n        a += 1\r\n    return base"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a = 0\r\n    if n==0:\r\n        return base\r\n    while n>1:\r\n        b = combiner(term(n), term(n-1))\r\n        a += b\r\n        n -= 2\r\n    if n==1:\r\n        a = combiner(a, combiner(base, term(1)))\r\n    return a", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            143
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    a = 0\r\n    if n==0:\r\n        return base\r\n    while n>1:\r\n        b = combiner(term(n), term(n-1))\r\n        a += b\r\n        n -= 2\r\n    if n==1:\r\n        a = combiner(a, combiner(base, term(1)))\r\n    return a", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    a = 0\r\n    while n>1:\r\n        b = combiner(term(n), term(n-1))\r\n        a += b\r\n        n -= 2\r\n    if n==1:\r\n        a = combiner(a, combiner(base, term(1)))\r\n    return a"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            158
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      11
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n37\n\n# Error: expected\n#     26\n# but got\n#     37", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        if combiner==mul:\r\n            total = mul(total, term(x))\r\n            x += 1\r\n        if combiner==add:\r\n            total = add(total, term(x))\r\n            x += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 37, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        if combiner==mul:\r\n            total = mul(total, term(x))\r\n            x += 1\r\n        if combiner==add:\r\n            total = add(total, term(x))\r\n            x += 1\r\n    return combiner(base, total)    return total", 
    "removed": [
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        if combiner==mul:\r\n            total = mul(total, term(x))\r\n            x += 1\r\n        if combiner==add:\r\n            total = add(total, term(x))\r\n            x += 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in helper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), helper(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(helper(n, term), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), helper(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(helper(n, term), base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), helper(n-1, term))\r\n    return combiner(helper(n, term), base)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            164
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n        return total    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n        return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k = k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            140
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k = k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(term(k), total)\r\n        k = k+1\r\n    return total"
  }, 
  {
    "added": [
      3, 
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n59\n\n# Error: expected\n#     26\n# but got\n#     59", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))\r\ndef add_things(x, y):\r\n    def actualadding(x, y):\r\n        return x+y\r\n    return actualadding(x, y)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ], 
          "add_things": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ], 
          "add_things": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 59, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(combiner(accumulate(combiner, base, n-1, term), term(n)), base)\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))\r\ndef add_things(x, y):\r\n    def actualadding(x, y):\r\n        return x+y\r\n    return actualadding(x, y)", 
    "removed": [
      1, 
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return combiner(combiner(accumulate(combiner, base, n-1, term), term(n)), base)\r\ndef add_things(x, y):\r\n    def actualadding(x, y):\r\n        return x+y\r\n    return actualadding(x, y)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    final = combiner(base, term(1))\r\n    i = 2\r\n    while i<=n:\r\n        final = combiner(final, term(i))\r\n        i += 1\r\n    return final", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    i = 1\r\n    final = combiner(base, term(1))\r\n    i = 2\r\n    while i<=n:\r\n        final = combiner(final, term(i))\r\n        i += 1\r\n    return final", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return base\r\n    i = 1\r\n    final = combiner(base, term(1))\r\n    while i<=n:\r\n        final = combiner(final, term(i))\r\n        i += 1\r\n    return final"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    acc, i = base, 1\r\n    while i<=n:\r\n        acc, i = combiner(acc, term(i)), i+1\r\n    return acc", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    acc, i = base, 0\r\n    acc, i = base, 1\r\n    while i<=n:\r\n        acc, i = combiner(acc, term(i)), i+1\r\n    return acc", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    acc, i = base, 0\r\n    while i<=n:\r\n        acc, i = combiner(acc, term(i)), i+1\r\n    return acc"
  }, 
  {
    "added": [
      2, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total, k = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      1, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while n<=k:\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while n<=k:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>=1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>1:\r\n    while n>=1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in terms\n    return combiner(func(m), terms(func, m + 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in terms\n    if m == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def terms(func, m):\r\n        if m==n:\r\n            return func(m)\r\n        else:\r\n            return combiner(func(m), terms(func, m+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, terms(term, 1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def terms(func, m):\r\n        if m==n:\r\n            return func(m)\r\n        else:\r\n            return combiner(func(m), terms(func, m+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, terms(term, 1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def terms(func, m):\r\n        if m==n:\r\n            return func(m)\r\n        else:\r\n            return combiner(func(m), terms(func, m+1))\r\n    return combiner(base, terms(term, 1))"
  }, 
  {
    "added": [
      2, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    t, i = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    t, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t\r\nfrom operator import add, mul    return t", 
    "removed": [
      1, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    t, i = start, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2, 
      3, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n10\n\n# Error: expected\n#     11\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    if n==0:\r\n        return base\r\n    amount = combiner(term(n), term(n-1))\r\n    while counter<n-1:\r\n        amount = combiner(amount, term(counter))\r\n        counter = counter+1\r\n    return combiner(base, amount)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    if n==0:\r\n        return base\r\n    amount = combiner(term(n), term(n-1))\r\n    while counter<n-1:\r\n        amount = combiner(amount, term(counter))\r\n        counter = counter+1\r\n    return combiner(base, amount)\r\nfrom operator import add, mul    return combiner(base, amount)", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    amount = combiner(term(n), term(n-1))\r\n    while counter<n-1:\r\n        amount = combiner(amount, term(counter))\r\n        counter = counter+1\r\n    return combiner(base, amount)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    while n>0:\r\n        x = combiner(term(n), x)\r\n        n -= 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    while n>0:\r\n        x = combiner(term(n), x)\r\n        n += 1\r\n        n -= 1\r\n    return x", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    while n>0:\r\n        x = combiner(term(n), x)\r\n        n += 1\r\n    return x"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            164
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    k = 1\r\n    while n>1:\r\n        k = combiner(k, term(n))\r\n        j = combiner(base, k)\r\n        n = n-1\r\n    return j", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return 0\r\n        return base\r\n    k = 1\r\n    while n>1:\r\n        k = combiner(k, term(n))\r\n        j = combiner(base, k)\r\n        n = n-1\r\n    return j", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return 0\r\n    k = 1\r\n    while n>1:\r\n        k = combiner(k, term(n))\r\n        j = combiner(base, k)\r\n        n = n-1\r\n    return j"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term_iteration = 1\r\n    while term_iteration<n+1:\r\n        base = combiner(base, term(term_iteration))\r\n        term_iteration += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term_iteration = 1\r\n    while term_iteration<n+1:\r\n        t = combiner(base, term(term_iteration))\r\n        base = combiner(base, term(term_iteration))\r\n        term_iteration += 1\r\n    return t    return base", 
    "removed": [
      3, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term_iteration = 1\r\n    while term_iteration<n+1:\r\n        t = combiner(base, term(term_iteration))\r\n        term_iteration += 1\r\n    return t"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n81\n\n# Error: expected\n#     26\n# but got\n#     81", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return 0+combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 81, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return base+combiner(term(n), accumulate(combiner, base, n-1, term))        return 0+combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return base+combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      4, 
      5, 
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def help(i, term):\r\n        if n==0:\r\n            return base\r\n        if i>=n:\r\n            return combiner(base, term(i))\r\n        return combiner(term(i), help(i+1, term))\r\n    return help(1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def help(i, term):\r\n        if i==n:\r\n        if n==0:\r\n            return base\r\n        if i>=n:\r\n            return combiner(base, term(i))\r\n        return combiner(term(i), help(i+1, term))\r\n    return help(0, term)    return help(1, term)", 
    "removed": [
      2, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def help(i, term):\r\n        if i==n:\r\n            return combiner(base, term(i))\r\n        return combiner(term(i), help(i+1, term))\r\n    return help(0, term)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in combine\n    return combiner(term(n), combine(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in combine\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def combine(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), combine(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combine(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def combine(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), combine(n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, combine(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def combine(n, term):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), combine(n-1, term))\r\n    return combiner(base, combine(n, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        i, total = i+1, combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<n:\r\n    while i<=n:\r\n        i, total = i+1, combiner(total, term(i))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<n:\r\n        i, total = i+1, combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(base), term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(base), term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(base), term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulator\n    return combiner(term(base), accumulator(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulator\n    if(base==n):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combiner, base, n, term):\r\n        if (n==0):\r\n            return base\r\n        else:\r\n            return combiner(term(n), accumulator(combiner, base, n-1, term))\r\n    return accumulator(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combiner, base, n, term):\r\n        if (base==n):\r\n            return term(base)\r\n        if (n==0):\r\n            return base\r\n        else:\r\n            return combiner(term(base), accumulator(combiner, base+1, n, term))\r\n            return combiner(term(n), accumulator(combiner, base, n-1, term))\r\n    return accumulator(combiner, base, n, term)", 
    "removed": [
      2, 
      3, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combiner, base, n, term):\r\n        if (base==n):\r\n            return term(base)\r\n        else:\r\n            return combiner(term(base), accumulator(combiner, base+1, n, term))\r\n    return accumulator(combiner, base, n, term)"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\nno\nno\nno\n72\n\n# Error: expected\n#     72\n# but got\n#     no", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def awkward_accumulate(combiner, base, x, n, term):\r\n        if x>n:\r\n            return base\r\n        if combiner==add:\r\n            return term(x)+awkward_accumulate(combiner, base, x+1, n, term)\r\n        else:\r\n            print(1)\r\n            return term(x)*awkward_accumulate(combiner, base, x+1, n, term)\r\n    return awkward_accumulate(combiner, base, 1, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def awkward_accumulate(combiner, base, x, n, term):\r\n        if x>n:\r\n            return base\r\n        if combiner==add:\r\n            return term(x)+awkward_accumulate(combiner, base, x+1, n, term)\r\n        else:\r\n            print('no')\r\n            print(1)\r\n            return term(x)*awkward_accumulate(combiner, base, x+1, n, term)\r\n    return awkward_accumulate(combiner, base, 1, n, term)", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def awkward_accumulate(combiner, base, x, n, term):\r\n        if x>n:\r\n            return base\r\n        if combiner==add:\r\n            return term(x)+awkward_accumulate(combiner, base, x+1, n, term)\r\n        else:\r\n            print('no')\r\n            return term(x)*awkward_accumulate(combiner, base, x+1, n, term)\r\n    return awkward_accumulate(combiner, base, 1, n, term)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n2\n3\n4\n5\n15\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    accumulate_sum = base\r\n    counter = 1\r\n    while counter<=n:\r\n        print(term(counter))\r\n        accumulate_sum = combiner(accumulate_sum, term(counter))\r\n        counter += 1\r\n    return accumulate_sum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "stack_locals": [], 
        "line": 9, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 9, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    accumulate_sum = base\r\n    counter = 1\r\n    while counter<=n:\r\n        print(term(counter))\r\n        accumulate_sum = combiner(accumulate_sum, term(counter))\r\n        counter += 1\r\n    return accumulate_sum\r\nfrom operator import add, mul    return accumulate_sum", 
    "removed": [
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    accumulate_sum = base\r\n    counter = 1\r\n    while counter<=n:\r\n        print(term(counter))\r\n        accumulate_sum = combiner(accumulate_sum, term(counter))\r\n        counter += 1\r\n    return accumulate_sum\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    result=combiner(result, term(i))\nTypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'int'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = combiner\r\n    result = base\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = combiner\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumualte(combiner, combiner(base, term(n)), n-1, term)\nNameError: name 'accumualte' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumualte(combiner, combiner(base, term(n)), n-1, term)        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumualte(combiner, combiner(base, term(n)), n-1, term)"
  }, 
  {
    "added": [
      3, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    total = base\r\n    while i>0:\r\n        total = combiner(total, term(i))\r\n        i -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    total = 0\r\n    total = base\r\n    while i>0:\r\n        total = combiner(total, term(i))\r\n        i -= 1\r\n    return combiner(base, total)    return total", 
    "removed": [
      2, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = n\r\n    total = 0\r\n    while i>0:\r\n        total = combiner(total, term(i))\r\n        i -= 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, term(n-1))"
  }, 
  {
    "added": [
      2, 
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    while k<=n:\r\n        base = combiner(base, term(k))\r\n        k = k+1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(base, term(k))\r\n        base = combiner(base, term(k))\r\n        k = k+1\r\n    return combiner(base, total)    return base", 
    "removed": [
      1, 
      4, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(base, term(k))\r\n        k = k+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        accumulation = accumulate(combiner, base, n-1, term)\r\n        if n>=1:\r\n            n = term(n)\r\n        return combiner(n, accumulation)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            164
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        accumulation = accumulate(combiner, base, n-1, term)\r\n        if n==1:\r\n        if n>=1:\r\n            n = term(n)\r\n        return combiner(n, accumulation)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        accumulation = accumulate(combiner, base, n-1, term)\r\n        if n==1:\r\n            n = term(n)\r\n        return combiner(n, accumulation)"
  }, 
  {
    "added": [
      7, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n<built-in function add>\n\n# Error: expected\n#     15\n# but got\n#     <built-in function add>", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    while x!=n+1:\r\n        base = combiner(base, term(x))\r\n        x = x+1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    while x!=n+1:\r\n        total = combiner(total, term(x))\r\n        base = combiner(base, term(x))\r\n        x = x+1\r\n    return combiner    return base", 
    "removed": [
      6, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    while x!=n+1:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return combiner"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n108\n\n# Error: expected\n#     72\n# but got\n#     108", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 108, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n    if n<=0:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7, 
      10, 
      13
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 46, in accumulate\n    return helper(combiner, base, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in helper\n    return helper(combiner, total, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in helper\n    return helper(combiner, total, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in helper\n    return helper(combiner, total, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in helper\n    return helper(combiner, total, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in helper\n    return helper(combiner, total, n, term, counter)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 45, in helper\n    return total\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    def helper(combiner, base, n, term, counter):\r\n        if n==0:\r\n            return base\r\n        if n>=counter:\r\n            base = combiner(base, term(counter))\r\n            counter += 1\r\n            return helper(combiner, base, n, term, counter)\r\n        else:\r\n            return base\r\n    return helper(combiner, base, n, term, counter)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    def helper(combiner, base, n, term, counter):\r\n        if n==0:\r\n            return base\r\n        if n>=counter:\r\n            total = combiner(base, term(counter))\r\n            base = combiner(base, term(counter))\r\n            counter += 1\r\n            return helper(combiner, total, n, term, counter)\r\n            return helper(combiner, base, n, term, counter)\r\n        else:\r\n            return total\r\n            return base\r\n    return helper(combiner, base, n, term, counter)", 
    "removed": [
      6, 
      9, 
      12
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    def helper(combiner, base, n, term, counter):\r\n        if n==0:\r\n            return base\r\n        if n>=counter:\r\n            total = combiner(base, term(counter))\r\n            counter += 1\r\n            return helper(combiner, total, n, term, counter)\r\n        else:\r\n            return total\r\n    return helper(combiner, base, n, term, counter)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    total = combiner(term, total)\nTypeError: unsupported operand type(s) for +: 'function' and 'int'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for x in range(1, n+1):\r\n        total = combiner(term(x), total)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for x in range(1, n+1):\r\n        total = combiner(term, total)\r\n        total = combiner(term(x), total)\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for x in range(1, n+1):\r\n        total = combiner(term, total)\r\n    return total"
  }, 
  {
    "added": [], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n4\n3\n2\n1\n15\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n>0:\r\n        base = combiner(base, term(n))\r\n        print(term(n))\r\n        return accumulate(combiner, base, n-1, term)\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n>0:\r\n        base = combiner(base, term(n))\r\n        print(term(n))\r\n        return accumulate(combiner, base, n-1, term)\r\n    return base", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n>0:\r\n        base = combiner(base, term(n))\r\n        print(term(n))\r\n        return accumulate(combiner, base, n-1, term)\r\n    return base"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n\n# Error: expected\n#     11\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulater(i):\r\n        if i<n:\r\n            return combiner(term(i), accumulater(i+1))\r\n        elif i==n:\r\n            return combiner(term(i), base)\r\n    if n==0:\r\n        return base\r\n    return accumulater(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulater(i):\r\n        if i<n:\r\n            return combiner(term(i), accumulater(i+1))\r\n        elif i==n:\r\n            return combiner(term(i), base)\r\n    if n==0:\r\n        return base\r\n    return accumulater(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulater(i):\r\n        if i<n:\r\n            return combiner(term(i), accumulater(i+1))\r\n        elif i==n:\r\n            return combiner(term(i), base)\r\n    return accumulater(1)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_func\n    return combiner(term(n),accumulate_func(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate_func\n    if(n==1):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def accumulate_func(n):\r\n        if (n==1):\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), accumulate_func(n-1))\r\n    return combiner(base, accumulate_func(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def accumulate_func(n):\r\n        if (n==1):\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), accumulate_func(n-1))\r\n    return combiner(base, accumulate_func(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_func(n):\r\n        if (n==1):\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), accumulate_func(n-1))\r\n    return combiner(base, accumulate_func(n))"
  }, 
  {
    "added": [
      10
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def indexer(count):\r\n        if count==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(count), indexer(count+1))\r\n    return combiner(base, indexer(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "stack_locals": [], 
        "line": 10, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def indexer(count):\r\n        if count==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(count), indexer(count+1))\r\n    return base+indexer(1)\r\nfrom operator import add, mul    return combiner(base, indexer(1))", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def indexer(count):\r\n        if count==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(count), indexer(count+1))\r\n    return base+indexer(1)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner,base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner,base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner,base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    combiner(term(n), accumulate(combiner,base, n-1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x, y = base, 1\r\n    while y<=n:\r\n        x = combiner(x, term(y))\r\n        y += 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x, y = base, 1\r\n    while y<=n:\r\n        x *= combiner(x, term(y))\r\n        x = combiner(x, term(y))\r\n        y += 1\r\n    return x", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x, y = base, 1\r\n    while y<=n:\r\n        x *= combiner(x, term(y))\r\n        y += 1\r\n    return x"
  }, 
  {
    "added": [
      2, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    total,x = BASE, 1\nNameError: name 'BASE' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, x = base, 1\r\n    while x<=n:\r\n        total = combiner(term(x), total)\r\n        x = x+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, x = BASE, 1\r\n    total, x = base, 1\r\n    while x<=n:\r\n        total = COMBINER(term(x), total)\r\n        total = combiner(term(x), total)\r\n        x = x+1\r\n    return total", 
    "removed": [
      1, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, x = BASE, 1\r\n    while x<=n:\r\n        total = COMBINER(term(x), total)\r\n        x = x+1\r\n    return total"
  }, 
  {
    "added": [
      2, 
      3, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    ans = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        ans = combiner(ans, term(i))\r\n    return ans", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    ans = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        ans = combiner(ans, term(i))\r\n    return ans\r\nfrom operator import add, mul    return ans", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    ans = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        ans = combiner(ans, term(i))\r\n    return ans\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6, 
      7, 
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    k = 1\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    x = 1\r\n    while x<=n:\r\n        result = combiner(result, term(n))\r\n        x += 1\r\n    k = 1\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "removed": [
      2, 
      3, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    x = 1\r\n    while x<=n:\r\n        result = combiner(result, term(n))\r\n        x += 1\r\n    return result"
  }, 
  {
    "added": [
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    while count<n+1:\r\n        base = combiner(base, term(count))\r\n        count += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            164
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    final = base\r\n    while count<n+1:\r\n        final = combiner(base, term(count))\r\n        base = combiner(base, term(count))\r\n        count += 1\r\n    return final    return base", 
    "removed": [
      2, 
      4, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    final = base\r\n    while count<n+1:\r\n        final = combiner(base, term(count))\r\n        count += 1\r\n    return final"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in acc\n    return combiner(term(n),acc(n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in acc\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def acc(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), acc(n-1, term))\r\n    return combiner(base, acc(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            167
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def acc(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), acc(n-1, term))\r\n    return combiner(base, acc(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def acc(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), acc(n-1, term))\r\n    return combiner(base, acc(n, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    mul = base\r\n    while counter<=n:\r\n        num = term(counter)\r\n        mul = combiner(mul, num)\r\n        counter = counter+1\r\n    return mul", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    mul = 0\r\n    mul = base\r\n    while counter<=n:\r\n        num = term(counter)\r\n        mul = combiner(mul, num)\r\n        counter = counter+1\r\n    return mul", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    mul = 0\r\n    while counter<=n:\r\n        num = term(counter)\r\n        mul = combiner(mul, num)\r\n        counter = counter+1\r\n    return mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def term_recursion(n):\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), term_recursion(n-1))\r\n    return combiner(base, term_recursion(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def term_recursion(n):\r\n        if n==0:\r\n        if n==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), term_recursion(n-1))\r\n    return combiner(base, term_recursion(n))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def term_recursion(n):\r\n        if n==0:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), term_recursion(n-1))\r\n    return combiner(base, term_recursion(n))"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n81\n\n# Error: expected\n#     26\n# but got\n#     81", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        k = term(n)\r\n        return combiner(accumulate(combiner, base, n-1, term), k)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 81, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        k = term(n)\r\n        return combiner(base, combiner(accumulate(combiner, base, n-1, term), k))        return combiner(accumulate(combiner, base, n-1, term), k)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        k = term(n)\r\n        return combiner(base, combiner(accumulate(combiner, base, n-1, term), k))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    total = combiner(base, term(i))\nUnboundLocalError: local variable 'i' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total = combiner(base, term(1))\r\n        i = 2\r\n        while i<=n:\r\n            total = combiner(total, term(i))\r\n            i += 1\r\n        return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total = combiner(base, term(i))\r\n        total = combiner(base, term(1))\r\n        i = 2\r\n        while i<=n:\r\n            total = combiner(total, term(i))\r\n            i += 1\r\n        return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total = combiner(base, term(i))\r\n        i = 2\r\n        while i<=n:\r\n            total = combiner(total, term(i))\r\n            i += 1\r\n        return total"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 43, in help\n    return help(combiner,base,i,total,n,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in help\n    if i == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def help(combiner, base, i, total, n, term):\r\n        if i==1:\r\n            return combiner(total, base)\r\n        total = combiner(total, term(n))\r\n        n = n-1\r\n        i = n\r\n        return help(combiner, base, i, total, n, term)\r\n    if n==0:\r\n        return base\r\n    return help(combiner, base, n, 1, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def help(combiner, base, i, total, n, term):\r\n        if i==1:\r\n            return combiner(total, base)\r\n        total = combiner(total, term(n))\r\n        n = n-1\r\n        i = n\r\n        return help(combiner, base, i, total, n, term)\r\n    if n==0:\r\n        return base\r\n    return help(combiner, base, n, 1, n, term)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def help(combiner, base, i, total, n, term):\r\n        if i==1:\r\n            return combiner(total, base)\r\n        total = combiner(total, term(n))\r\n        n = n-1\r\n        i = n\r\n        return help(combiner, base, i, total, n, term)\r\n    return help(combiner, base, n, 1, n, term)"
  }, 
  {
    "added": [
      2, 
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        if combiner==add:\r\n            total = total+term(k)\r\n        else:\r\n            total = total*term(k)\r\n        k = k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        if combiner==add:\r\n            total = total+term(k)\r\n        else:\r\n            total = total*term(k)\r\n        k = k+1\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    k = 1\r\n    while k<=n:\r\n        if combiner==add:\r\n            total = total+term(k)\r\n        else:\r\n            total = total*term(k)\r\n        k = k+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     26\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    total = 0\r\n    k = 1\r\n    total = base\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    total = 0\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 1, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      2, 
      6, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(base, term(i))\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      1, 
      5, 
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(base, term(i))\r\n        i += 1\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == base:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),term(n-1)) + accumulate(combiner,base,n-2,term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n==0:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))+accumulate(combiner, base, n-2, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))+accumulate(combiner, base, n-2, term)"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n16\n\n# Error: expected\n#     72\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = n\r\n    if x==0:\r\n        return base\r\n    else:\r\n        return combiner(term(x), accumulate(combiner, base, x-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = n\r\n    if x==0:\r\n        return base\r\n    else:\r\n        return term(x)+accumulate(combiner, base, x-1, term)        return combiner(term(x), accumulate(combiner, base, x-1, term))", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = n\r\n    if x==0:\r\n        return base\r\n    else:\r\n        return term(x)+accumulate(combiner, base, x-1, term)"
  }, 
  {
    "added": [
      3, 
      10
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper_product(base, n, term):\r\n        total = base\r\n        k = 1\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k = k+1\r\n        return total\r\n    return helper_product(base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper_product(base, n, term):\r\n        total = 0\r\n        total = base\r\n        k = 1\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k = k+1\r\n        return total\r\n    return combiner(helper_product(base, n, term), base)    return helper_product(base, n, term)", 
    "removed": [
      2, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper_product(base, n, term):\r\n        total = 0\r\n        k = 1\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k = k+1\r\n        return total\r\n    return combiner(helper_product(base, n, term), base)"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in counter\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    if n==0:\r\n        return base\r\n    return counter(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    if n==0:\r\n        return base\r\n    return counter(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return combiner(base, term(n))\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    return counter(1)"
  }, 
  {
    "added": [], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner((total,term(x)))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            158
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total"
  }, 
  {
    "added": [
      12
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        total = 0\r\n        while n>0:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    if combiner==mul:\r\n        total = 1\r\n        while n>1:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        total = 0\r\n        while n>0:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    if combiner==mul:\r\n        total = 1\r\n        while n>0:\r\n        while n>1:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    return total", 
    "removed": [
      11
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==add:\r\n        total = 0\r\n        while n>0:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    if combiner==mul:\r\n        total = 1\r\n        while n>0:\r\n            total = combiner(total, combiner(term(n), term(n-1)))\r\n            n = n-2\r\n        total = combiner(total, base)\r\n    return total"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    while n>=1:\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            168
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    while n>=1:\r\n        num = combiner(base, term(n))\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return num    return base", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    while n>=1:\r\n        num = combiner(base, term(n))\r\n        n -= 1\r\n    return num"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==1 or n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            158
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1 or n==0:\r\n    if combiner==1 or n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1 or n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    term1 = combiner(a, term(term2))\nNameError: name 'a' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term1 = base\r\n    term2 = 1\r\n    while term2<=n:\r\n        base = combiner(base, term(term2))\r\n        term2 += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            144
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            143
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            143
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            143
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term1 = base\r\n    term2 = 1\r\n    while term2<=n:\r\n        term1 = combiner(a, term(term2))\r\n        base = combiner(base, term(term2))\r\n        term2 += 1\r\n    return term1\r\nfrom operator import add, mul    return base", 
    "removed": [
      4, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term1 = base\r\n    term2 = 1\r\n    while term2<=n:\r\n        term1 = combiner(a, term(term2))\r\n        term2 += 1\r\n    return term1\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == base:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = combiner(base, term(n))\r\n    while n>=0:\r\n        if n<=1:\r\n            return k\r\n        else:\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return base\r\n    return combiner(term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = combiner(base, term(n))\r\n    while n>=0:\r\n        if n<=1:\r\n            return k\r\n        else:\r\n            return combiner(base, term(n-1))\r\n    return k\r\n            return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return base\r\n    return combiner(term)", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = combiner(base, term(n))\r\n    while n>=0:\r\n        if n<=1:\r\n            return k\r\n        else:\r\n            return combiner(base, term(n-1))\r\n    return k\r\n    return combiner(term)"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<n+1:\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<n+1:\r\n        total = term(total)\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<n+1:\r\n        total = term(total)\r\n        x += 1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    final = base\r\n    x = 1\r\n    while x<=n:\r\n        final = combiner(term(x), final)\r\n        x = x+1\r\n    return final", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    final = 1\r\n    final = base\r\n    x = 1\r\n    while x<=n:\r\n        final = combiner(term(x), final)\r\n        x = x+1\r\n    return final", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    final = 1\r\n    x = 1\r\n    while x<=n:\r\n        final = combiner(term(x), final)\r\n        x = x+1\r\n    return final"
  }, 
  {
    "added": [
      2, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term_total = base\r\n    k = 1\r\n    while k<=n:\r\n        term_total = combiner(term_total, term(k))\r\n        k = k+1\r\n    return term_total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term_total = 0\r\n    term_total = base\r\n    k = 1\r\n    while k<=n:\r\n        term_total = combiner(term_total, term(k))\r\n        k = k+1\r\n    return combiner(base, term_total)    return term_total", 
    "removed": [
      1, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term_total = 0\r\n    k = 1\r\n    while k<=n:\r\n        term_total = combiner(term_total, term(k))\r\n        k = k+1\r\n    return combiner(base, term_total)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    combined = base\r\n    while i<=n:\r\n        combined = combiner(combined, term(i))\r\n        i += 1\r\n    return combined", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    i = 1\r\n    combined = base\r\n    while i<=n:\r\n        combined = combiner(combined, term(i))\r\n        i += 1\r\n    return combined", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    combined = base\r\n    while i<=n:\r\n        combined = combiner(combined, term(i))\r\n        i += 1\r\n    return combined"
  }, 
  {
    "added": [
      21
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total+k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total+(k**2), k+1\r\n            return total+base\r\n    else:\r\n        total, k = 1, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total*k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total*(k**2), k+1\r\n            return total*base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total+k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total+(k**2), k+1\r\n            return total+base\r\n    else:\r\n        total, k = 1, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total*k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total*(k**2), k+1\r\n            return total+base            return total*base", 
    "removed": [
      20
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total, k = 0, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total+k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total+(k**2), k+1\r\n            return total+base\r\n    else:\r\n        total, k = 1, 1\r\n        if term==identity:\r\n            while k<=n:\r\n                total, k = total*k, k+1\r\n            return total+base\r\n        else:\r\n            while k<=n:\r\n                total, k = total*(k**2), k+1\r\n            return total+base"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    partial_total = base\r\n    while k<n+1:\r\n        partial_total = combiner(partial_total, term(k))\r\n        k += 1\r\n    return partial_total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    partial_total = base\r\n    while k<n:\r\n    while k<n+1:\r\n        partial_total = combiner(partial_total, term(k))\r\n        k += 1\r\n    return partial_total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    partial_total = base\r\n    while k<n:\r\n        partial_total = combiner(partial_total, term(k))\r\n        k += 1\r\n    return partial_total"
  }, 
  {
    "added": [
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    total = base\r\n    for i in range(1, n):\r\n        total = combiner(total, term(i))\r\n    return combiner(total, term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    total = base\r\n    for i in range(1, n):\r\n        total = combiner(total, i)\r\n    return combiner(total, n)        total = combiner(total, term(i))\r\n    return combiner(total, term(n))", 
    "removed": [
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    total = base\r\n    for i in range(1, n):\r\n        total = combiner(total, i)\r\n    return combiner(total, n)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(accumulate(combiner, base, i-1, term), term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(term(i-1), term(i))\r\n        total = combiner(accumulate(combiner, base, i-1, term), term(i))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(term(i-1), term(i))\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in combiner_func\n    return combiner(term(n), combiner_func(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in combiner_func\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def combiner_func(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), combiner_func(combiner, n-1, term))\r\n    return combiner(base, combiner_func(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            168
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def combiner_func(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), combiner_func(combiner, n-1, term))\r\n    return combiner(base, combiner_func(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def combiner_func(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), combiner_func(combiner, n-1, term))\r\n    return combiner(base, combiner_func(combiner, n, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    total = base\r\n    while start<=n:\r\n        total = combiner(term(start), total)\r\n        start += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    total = base\r\n    while start<=n:\r\n        total = combiner(term(start), total)\r\n        start += 1\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    total = base\r\n    while start<=n:\r\n        total = combiner(term(start), total)\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = base+combiner(term(n), n-1)\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = base+combiner(term(n), n-1)\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    index = 1\r\n    while index<=n:\r\n        base = combiner(base, term(index))\r\n        index += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    index = 1\r\n    while index<=n:\r\n        total = combiner(base, term(index))\r\n        base = combiner(base, term(index))\r\n        index += 1\r\n    return total    return base", 
    "removed": [
      3, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    index = 1\r\n    while index<=n:\r\n        total = combiner(base, term(index))\r\n        index += 1\r\n    return total"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n16\n\n# Error: expected\n#     72\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(i), accumulate(combiner, base, n-1, term))\r\n    return helper(n)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return term(i)+accumulate(combiner, base, n-1, term)\r\n            return combiner(term(i), accumulate(combiner, base, n-1, term))\r\n    return helper(n)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return term(i)+accumulate(combiner, base, n-1, term)\r\n    return helper(n)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper_func1\n    return combiner(term(n), helper_func1(n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper_func1\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper_func1(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_func1(n-1, term))\r\n    return combiner(base, helper_func1(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper_func1(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_func1(n-1, term))\r\n    return combiner(base, helper_func1(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper_func1(n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_func1(n-1, term))\r\n    return combiner(base, helper_func1(n, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      6, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n70\n\n# Error: expected\n#     26\n# but got\n#     70", 
    "after": "def accumulate(combiner, base, n, term):\r\n    j = base\r\n    k = 0\r\n    q = 0\r\n    for i in range(1, n+1):\r\n        base = combiner(base, term(i))\r\n        q = combiner(k, q)\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 70, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    j = base\r\n    k = 0\r\n    q = 0\r\n    for i in range(1, n+1):\r\n        k = combiner(j, term(i))\r\n        base = combiner(base, term(i))\r\n        q = combiner(k, q)\r\n    return q    return base", 
    "removed": [
      5, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    j = base\r\n    k = 0\r\n    q = 0\r\n    for i in range(1, n+1):\r\n        k = combiner(j, term(i))\r\n        q = combiner(k, q)\r\n    return q"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate_helper\n    return accumulate_helper(combiner, i + 1, combiner(n_result, term(i)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate_helper\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def accumulate_helper(combiner, i, n_result):\r\n        if i==n:\r\n            return combiner(n_result, term(i))\r\n        else:\r\n            return accumulate_helper(combiner, i+1, combiner(n_result, term(i)))\r\n    return accumulate_helper(combiner, 1, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def accumulate_helper(combiner, i, n_result):\r\n        if i==n:\r\n            return combiner(n_result, term(i))\r\n        else:\r\n            return accumulate_helper(combiner, i+1, combiner(n_result, term(i)))\r\n    return accumulate_helper(combiner, 1, base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(combiner, i, n_result):\r\n        if i==n:\r\n            return combiner(n_result, term(i))\r\n        else:\r\n            return accumulate_helper(combiner, i+1, combiner(n_result, term(i)))\r\n    return accumulate_helper(combiner, 1, base)"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def combine(i):\r\n        if i==n:\r\n            return term(i)\r\n        elif i==0:\r\n            return combiner(base, combine(i+1))\r\n        else:\r\n            return combiner(term(i), combine(i+1))\r\n    if n==0:\r\n        return base\r\n    return combine(0)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def combine(i):\r\n        if i==n:\r\n            return term(i)\r\n        elif i==0:\r\n            return combiner(base, combine(i+1))\r\n        else:\r\n            return combiner(term(i), combine(i+1))\r\n    if n==0:\r\n        return base\r\n    return combine(0)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def combine(i):\r\n        if i==n:\r\n            return term(i)\r\n        elif i==0:\r\n            return combiner(base, combine(i+1))\r\n        else:\r\n            return combiner(term(i), combine(i+1))\r\n    return combine(0)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n20\n\n# Error: expected\n#     15\n# but got\n#     20", 
    "after": "def accumulate(combiner, base, n, term):\r\n    Total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        Total = combiner(Total, term(counter))\r\n        counter += 1\r\n    return Total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 20, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    Total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        Total = combiner(Total, term(counter))\r\n        counter += 1\r\n        Total = combiner(Total, term(counter))\r\n    return Total", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    Total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        counter += 1\r\n        Total = combiner(Total, term(counter))\r\n    return Total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(base, accumulate(combiner, term(n), n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(base, accumulate(combiner, term(n), n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(base, accumulate(combiner, term(n), n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(base, accumulate(combiner, term(n), n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(base, accumulate(combiner, term(n), n - 1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return \r\n    else:\r\n        return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return \r\n    else:\r\n        return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return \r\n    else:\r\n        return combiner(base, accumulate(combiner, term(n), n-1, term))"
  }, 
  {
    "added": [
      2, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n<1):\r\n        return base\r\n    return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n    if (n<1):\r\n        return base\r\n    return combiner(base, accumulate(combiner, base, n-1, term))    return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      1, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    lst = map(term, range(1, n+1))\r\n    total = base\r\n    k = 0\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, term(k))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    lst = map(term, range(1, n+1))\r\n    total = base\r\n    k = 0\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, k)\r\n        total = combiner(total, term(k))\r\n    return total", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    lst = map(term, range(1, n+1))\r\n    total = base\r\n    k = 0\r\n    while k<n:\r\n        k += 1\r\n        total = combiner(total, k)\r\n    return total"
  }, 
  {
    "added": [
      2, 
      3, 
      12
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term1 = term(1)\r\n    if n==0:\r\n        return base\r\n    accum = combiner(base, term1)\r\n    k = 2\r\n    while k<=n:\r\n        terms = term(k)\r\n        accum = combiner(accum, terms)\r\n        k += 1\r\n    return accum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "stack_locals": [], 
        "line": 10, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term1 = term(1)\r\n    if n==0:\r\n        return base\r\n    accum = combiner(base, term1)\r\n    k = 2\r\n    while k<=n:\r\n        terms = term(k)\r\n        accum = combiner(accum, terms)\r\n        k += 1\r\n    return accum\r\nfrom operator import add, mul    return accum", 
    "removed": [
      10, 
      11
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term1 = term(1)\r\n    accum = combiner(base, term1)\r\n    k = 2\r\n    while k<=n:\r\n        terms = term(k)\r\n        accum = combiner(accum, terms)\r\n        k += 1\r\n    return accum\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n>0:\r\n        for i in range(1, n+1):\r\n            total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            167
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n>0:\r\n        for i in range(1, n+1):\r\n            combiner(total, term(i))\r\n            total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    if n>0:\r\n        for i in range(1, n+1):\r\n            combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n19\n\n# Error: expected\n#     25\n# but got\n#     19", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, term(n))\r\n    while n>1:\r\n        result, n = combiner(result, term(n-1)), n-1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            168
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 19, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, n)\r\n    result = combiner(base, term(n))\r\n    while n>1:\r\n        result, n = combiner(result, term(n-1)), n-1\r\n    return result", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = combiner(base, n)\r\n    while n>1:\r\n        result, n = combiner(result, term(n-1)), n-1\r\n    return result"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    if n==0:\r\n        return base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    if n==0:\r\n        return base\r\n    while i<=n:\r\n        total = combiner(total, i)\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    if n==0:\r\n        return base\r\n    while i<=n:\r\n        total = combiner(total, i)\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = base\r\n    while count<=n:\r\n        total = combiner(total, term(count))\r\n        count = count+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = term(base)\r\n    total = base\r\n    while count<=n:\r\n        total = combiner(total, term(count))\r\n        count = count+1\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    total = term(base)\r\n    while count<=n:\r\n        total = combiner(total, term(count))\r\n        count = count+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == base:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    start = combiner(term(n), start)\nUnboundLocalError: local variable 'start' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return start\r\n        return base\r\n    else:\r\n        start = combiner(term(n), start)\r\n        return accumulate(combiner, start, n-1, term)        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return start\r\n    else:\r\n        start = combiner(term(n), start)\r\n        return accumulate(combiner, start, n-1, term)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<n+1:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<n:\r\n    while counter<n+1:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<n:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def partial_total(combiner, base, n, term):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            base = combiner(base, term(n))\r\n            return partial_total(combiner, base, n-1, term)\r\n    return partial_total(combiner, base, n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def partial_total(combiner, base, n, term):\r\n        if n==1:\r\n        if n==0:\r\n            return base\r\n        else:\r\n            base = combiner(base, term(n))\r\n            return partial_total(combiner, base, n-1, term)\r\n    return partial_total(combiner, base, n, term)", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def partial_total(combiner, base, n, term):\r\n        if n==1:\r\n            return base\r\n        else:\r\n            base = combiner(base, term(n))\r\n            return partial_total(combiner, base, n-1, term)\r\n    return partial_total(combiner, base, n, term)"
  }, 
  {
    "added": [
      1, 
      2, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(n), helper(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(n):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(n-1))\r\n    return combiner(base, helper(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(n):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(n-1))\r\n    return combiner(base, helper(n))\r\nfrom operator import add, mul    return combiner(base, helper(n))", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(n):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper(n-1))\r\n    return combiner(base, helper(n))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     26\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    num = 1\r\n    x = base\r\n    while num<=n:\r\n        x = combiner(x, term(num))\r\n        num += 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    num = base\r\n    x = 0\r\n    num = 1\r\n    x = base\r\n    while num<=n:\r\n        x = combiner(x, term(num))\r\n        num += 1\r\n    return x", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    num = base\r\n    x = 0\r\n    while num<=n:\r\n        x = combiner(x, term(num))\r\n        num += 1\r\n    return x"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in terms\n    return combiner(term(n), terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in terms\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def terms(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), terms(n-1))\r\n    return combiner(base, terms(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def terms(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), terms(n-1))\r\n    return combiner(base, terms(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def terms(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), terms(n-1))\r\n    return combiner(base, terms(n))"
  }, 
  {
    "added": [
      5, 
      6, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     15\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    while k<=n+1:\r\n        total, k = combiner(term(k), term(k+1)), k+2\r\n    return combiner(total, base)    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1, 
      2, 
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    while k<=n+1:\r\n        total, k = combiner(term(k), term(k+1)), k+2\r\n    return combiner(total, base)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = n+1\r\n    for i in range(1, k):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = n+1\r\n    for i in range(base, k):\r\n    for i in range(1, k):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = n+1\r\n    for i in range(base, k):\r\n        total = combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      1, 
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>0:\r\n        total = combiner(term(n), base)\r\n        total = combiner(term(n), total)\r\n        n -= 1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    while n>0:\r\n        total = combiner(term(n), base)\r\n        n -= 1\r\n    return total"
  }, 
  {
    "added": [
      4, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    answer = combiner(answer,term(i))\nUnboundLocalError: local variable 'answer' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    while i<(n+1):\r\n        base = combiner(base, term(i))\r\n        i += 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            168
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    while i<(n+1):\r\n        answer = combiner(answer, term(i))\r\n        base = combiner(base, term(i))\r\n        i += 1\r\n    return answer\r\nfrom operator import add, mul    return base", 
    "removed": [
      3, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    while i<(n+1):\r\n        answer = combiner(answer, term(i))\r\n        i += 1\r\n    return answer\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in accumulate\n    return combiner(term(n), combiner(n-1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'function'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), combiner(n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), combiner(n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n221592999\n\n# Error: expected\n#     25\n# but got\n#     221592999", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            167
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 221592999, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, term(accumulate(combiner, base, n-1, term)))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, term(accumulate(combiner, base, n-1, term)))"
  }, 
  {
    "added": [
      8, 
      9, 
      10, 
      11, 
      12
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    while i<=n:\r\n        base = combiner(base, term(i))\r\n        i = i+1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            170
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        if n==0:\r\n            return base\r\n        if n>0:\r\n            return accumulate(combiner, base, term(n-1), term)\r\n    if combiner==mul:\r\n        return base+factorial(n)    i = 1\r\n    while i<=n:\r\n        base = combiner(base, term(i))\r\n        i = i+1\r\n    return base", 
    "removed": [
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        if n==0:\r\n            return base\r\n        if n>0:\r\n            return accumulate(combiner, base, term(n-1), term)\r\n    if combiner==mul:\r\n        return base+factorial(n)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, base\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            171
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, 1\r\n    k, total = 1, base\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, term(n-1))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, n-1, term))"
  }, 
  {
    "added": [
      8, 
      11
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n20\n\n# Error: expected\n#     15\n# but got\n#     20", 
    "after": "def accumulate(combiner, base, n, term):\r\n    y = term(n)\r\n    x = n\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while x>=1:\r\n            base = combiner(base, term(x))\r\n            x -= 1\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 20, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    y = term(n)\r\n    x = n\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while x>=1:\r\n            y = combiner(y, term(x))\r\n            base = combiner(base, term(x))\r\n            x -= 1\r\n        return y        return base", 
    "removed": [
      7, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    y = term(n)\r\n    x = n\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while x>=1:\r\n            y = combiner(y, term(x))\r\n            x -= 1\r\n        return y"
  }, 
  {
    "added": [
      3, 
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        if combiner==add:\r\n            return 0\r\n        return 1\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        if combiner=='add':\r\n        return base\r\n    if n==0:\r\n        if combiner==add:\r\n            return 0\r\n        return 1\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        if combiner=='add':\r\n            return 0\r\n        return 1\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=1:\r\n    while x<=n:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    x = 1\r\n    while x<=1:\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(func, x, combiner):\r\n        if x==n+1:\r\n            return base\r\n        else:\r\n            return combiner(func(x), helper(term, x+1, combiner))\r\n    return helper(term, 1, combiner)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            37
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(func, x, combiner):\r\n        if x==n:\r\n        if x==n+1:\r\n            return base\r\n        else:\r\n            return combiner(func(x), helper(term, x+1, combiner))\r\n    return helper(term, 1, combiner)", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(func, x, combiner):\r\n        if x==n:\r\n            return base\r\n        else:\r\n            return combiner(func(x), helper(term, x+1, combiner))\r\n    return helper(term, 1, combiner)"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def times(n, total):\r\n        if n<=1:\r\n            return total\r\n        else:\r\n            return times(n-1, combiner(total, term(n)))\r\n    if n!=0:\r\n        return combiner(base, times(n, 1))\r\n    else:\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def times(n, total):\r\n        if n<=1:\r\n            return total\r\n        else:\r\n            return times(n-1, combiner(total, term(n)))\r\n    if n!=0:\r\n        return base+times(n, 1)\r\n        return combiner(base, times(n, 1))\r\n    else:\r\n        return base", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def times(n, total):\r\n        if n<=1:\r\n            return total\r\n        else:\r\n            return times(n-1, combiner(total, term(n)))\r\n    if n!=0:\r\n        return base+times(n, 1)\r\n    else:\r\n        return base"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return (combiner(term(n), accumulate(combiner, base, n-1, term)))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return (combiner(term(n), accumulate(combiner, base, n-1, term)))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    else:\r\n        return (combiner(term(n), accumulate(combiner, base, n-1, term)))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = combiner(base, term(n))\r\n    if n==0:\r\n        return base\r\n    if n<1:\r\n        return total\r\n    else:\r\n        return accumulate(combiner, total, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = combiner(base, term(n))\r\n    if n==0:\r\n        return base\r\n    if n<1:\r\n        return total\r\n    else:\r\n        return accumulate(combiner, total, n-1, term)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = combiner(base, term(n))\r\n    if n<1:\r\n        return total\r\n    else:\r\n        return accumulate(combiner, total, n-1, term)"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n-1, term),term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulator\n    return combo(function(i), accumulator(combo, b, i + 1, function))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulator\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combo, b, i, function):\r\n        if i==n:\r\n            return combo(b, function(i))\r\n        else:\r\n            return combo(function(i), accumulator(combo, b, i+1, function))\r\n    if n==0:\r\n        return base\r\n    return accumulator(combiner, base, 1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combo, b, i, function):\r\n        if i==n:\r\n            return combo(b, function(i))\r\n        else:\r\n            return combo(function(i), accumulator(combo, b, i+1, function))\r\n    if n==0:\r\n        return base\r\n    return accumulator(combiner, base, 1, term)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulator(combo, b, i, function):\r\n        if i==n:\r\n            return combo(b, function(i))\r\n        else:\r\n            return combo(function(i), accumulator(combo, b, i+1, function))\r\n    return accumulator(combiner, base, 1, term)"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = base\r\n    while counter<=n:\r\n        total, counter = combiner(total, term(counter)), counter+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            170
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = 1\r\n    total = base\r\n    while counter<=n:\r\n        total, counter = combiner(total, term(counter)), counter+1\r\n    return combiner(base, total)    return total", 
    "removed": [
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = 1\r\n    while counter<=n:\r\n        total, counter = combiner(total, term(counter)), counter+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, 1)\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return 1\r\n        return combiner(base, 1)\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return 1\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(0), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            172
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      9, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def counter(combiner, base, n, term, total, count):\r\n        if count<=n:\r\n            placeholder = int(term(count))\r\n            total = combiner(total, placeholder)\r\n            return counter(combiner, base, n, term, total, count+1)\r\n        else:\r\n            return total\r\n    return counter(combiner, base, n, term, base, 1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            174
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def counter(combiner, base, n, term, total, count):\r\n        if count<=n:\r\n            placeholder = int(term(count))\r\n            total = combiner(total, placeholder)\r\n            return counter(combiner, base, n, term, total, count+1)\r\n        else:\r\n            return combiner(base, total)\r\n    return counter(combiner, base, n, term, 1, 1)            return total\r\n    return counter(combiner, base, n, term, base, 1)", 
    "removed": [
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def counter(combiner, base, n, term, total, count):\r\n        if count<=n:\r\n            placeholder = int(term(count))\r\n            total = combiner(total, placeholder)\r\n            return counter(combiner, base, n, term, total, count+1)\r\n        else:\r\n            return combiner(base, total)\r\n    return counter(combiner, base, n, term, 1, 1)"
  }, 
  {
    "added": [], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n72\n\n# Error: expected\n#     \n# but got\n#     72", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for num in range(1, n+1):\r\n        total = combiner(total, term(num))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": null, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 72, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for num in range(1, n+1):\r\n        total = combiner(total, term(num))\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for num in range(1, n+1):\r\n        total = combiner(total, term(num))\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    total, k = 1\nTypeError: 'int' object is not iterable\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n22\n\n# Error: expected\n#     11\n# but got\n#     22", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accu_helper(i):\r\n        if n==0:\r\n            return n\r\n        elif i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), accu_helper(i-1))\r\n    return combiner(base, accu_helper(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 22, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accu_helper(i):\r\n        if n==0:\r\n            return base\r\n            return n\r\n        elif i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), accu_helper(i-1))\r\n    return combiner(base, accu_helper(n))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accu_helper(i):\r\n        if n==0:\r\n            return base\r\n        elif i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), accu_helper(i-1))\r\n    return combiner(base, accu_helper(n))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in whatever\n    return combiner(term(n), whatever(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in whatever\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def whatever(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), whatever(n-1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, whatever(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def whatever(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), whatever(n-1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, whatever(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def whatever(n):\r\n        if n==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(n), whatever(n-1))\r\n    return combiner(base, whatever(n))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulation_counter\n    return combiner(f(counter), accumulation_counter(combiner, (counter + 1), n, f))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulation_counter\n    if counter == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulation_counter(combiner, counter, n, f):\r\n        if counter==n:\r\n            return f(n)\r\n        else:\r\n            return combiner(f(counter), accumulation_counter(combiner, (counter+1), n, f))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulation_counter(combiner, 1, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulation_counter(combiner, counter, n, f):\r\n        if counter==n:\r\n            return f(n)\r\n        else:\r\n            return combiner(f(counter), accumulation_counter(combiner, (counter+1), n, f))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulation_counter(combiner, 1, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulation_counter(combiner, counter, n, f):\r\n        if counter==n:\r\n            return f(n)\r\n        else:\r\n            return combiner(f(counter), accumulation_counter(combiner, (counter+1), n, f))\r\n    return combiner(base, accumulation_counter(combiner, 1, n, term))"
  }, 
  {
    "added": [
      4, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    if combiner==add:\r\n        total = 0\r\n        while i<=n:\r\n            total += term(i)\r\n            i += 1\r\n        total = total+base\r\n    elif combiner==mul:\r\n        total = 1\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        total = total*base\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 1\r\n    if combiner==add:\r\n        total = 0\r\n        while i<=n:\r\n            total += term(i)\r\n            i += 1\r\n        total = total+base\r\n    elif combiner==mul:\r\n        total = 1\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        total = total*base\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = 1\r\n    if combiner==add:\r\n        while i<=n:\r\n            total += term(i)\r\n            i += 1\r\n        total = total+base\r\n    elif combiner==mul:\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        total = total*base\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n22\n\n# Error: expected\n#     11\n# but got\n#     22", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(i):\r\n        if n==0:\r\n            return n\r\n        elif i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), accumulate_helper(i+1))\r\n    return combiner(base, accumulate_helper(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 22, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(i):\r\n        if n==0:\r\n            return base\r\n            return n\r\n        elif i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), accumulate_helper(i+1))\r\n    return combiner(base, accumulate_helper(1))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(i):\r\n        if n==0:\r\n            return base\r\n        elif i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), accumulate_helper(i+1))\r\n    return combiner(base, accumulate_helper(1))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return ", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return ", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(1, base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return "
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in function\n    else: return combiner(term(m), function(m-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in function\n    if m == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def function(m):\r\n        if m==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(m), function(m-1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, function(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def function(m):\r\n        if m==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(m), function(m-1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, function(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def function(m):\r\n        if m==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(m), function(m-1))\r\n    return combiner(base, function(n))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    if n==0:\r\n        return base\r\n    for i in range(2, n+1):\r\n        total = combiner(total, term(i))\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    if n==0:\r\n        return base\r\n    for i in range(2, n+1):\r\n        total = combiner(total, term(i))\r\n    return combiner(base, total)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    for i in range(2, n+1):\r\n        total = combiner(total, term(i))\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    if n==0:\r\n        return base\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    total, k = base, 1\r\n    if n==0:\r\n        return base\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    if n==0:\r\n        return base\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(accumulate(combiner, base, n-1, term), n)    return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(accumulate(combiner, base, n-1, term), n)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    helper(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(i), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    helper(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(i), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    helper(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(i), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    helper(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(i), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    helper(n)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in helper\n    return combiner(term(i), accumulate(combiner, base, n-1, term))\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(i), accumulate(combiner, base, n-1, term))\r\n    return helper(n)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            121
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(i), accumulate(combiner, base, n-1, term))\r\n    helper(n)    return helper(n)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return combiner(term(i), accumulate(combiner, base, n-1, term))\r\n    helper(n)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    n_counter = 1\r\n    if n==0:\r\n        return base\r\n    accum_num = combiner(base, term(n_counter))\r\n    while n_counter<n:\r\n        n_counter += 1\r\n        accum_num = combiner(accum_num, term(n_counter))\r\n    return accum_num", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    n_counter = 1\r\n    if n==0:\r\n        return base\r\n    accum_num = combiner(base, term(n_counter))\r\n    while n_counter<n:\r\n        n_counter += 1\r\n        accum_num = combiner(accum_num, term(n_counter))\r\n    return accum_num", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    n_counter = 1\r\n    accum_num = combiner(base, term(n_counter))\r\n    while n_counter<n:\r\n        n_counter += 1\r\n        accum_num = combiner(accum_num, term(n_counter))\r\n    return accum_num"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    result = base\r\n    for i in range(start, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            158
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            121
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    result = start\r\n    result = base\r\n    for i in range(start, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    start = 1\r\n    result = start\r\n    for i in range(start, n+1):\r\n        result = combiner(result, term(i))\r\n    return result"
  }, 
  {
    "added": [
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    for i in range (start, n + 1):\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(start, n+1):\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(start, n+1):\r\n        total = combiner(total, term(i))\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        total = combiner(total, term(counter))\r\n        counter = counter+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        total = combiner(total, counter)\r\n        total = combiner(total, term(counter))\r\n        counter = counter+1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    counter = 1\r\n    while counter<=n:\r\n        total = combiner(total, counter)\r\n        counter = counter+1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a = base\r\n    for i in range(n):\r\n        a = combiner(a, term(i+1))\r\n    return (a)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    a = base\r\n    for i in range(n):\r\n        combiner(a, term(i+1))\r\n        a = combiner(a, term(i+1))\r\n    return (a)", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    a = base\r\n    for i in range(n):\r\n        combiner(a, term(i+1))\r\n    return (a)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n108\n\n# Error: expected\n#     72\n# but got\n#     108", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<=0:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 108, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n    if n<=0:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return term(n)+base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), acummulate(combiner, base, n-1, term))\nNameError: name 'acummulate' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), acummulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), acummulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, i = base, 1\r\n    while i<=n:\r\n        total, i = combiner(total, term(i)), i+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, i = base, 1\r\n    while i<n:\r\n    while i<=n:\r\n        total, i = combiner(total, term(i)), i+1\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, i = base, 1\r\n    while i<n:\r\n        total, i = combiner(total, term(i)), i+1\r\n    return total"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in first_sequence\n    return combiner(term(i),first_sequence(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in first_sequence\n    if i==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def first_sequence(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), first_sequence(i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, first_sequence(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def first_sequence(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), first_sequence(i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, first_sequence(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def first_sequence(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), first_sequence(i+1))\r\n    return combiner(base, first_sequence(1))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n28\n\n# Error: expected\n#     72\n# but got\n#     28", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_seq(combiner, term, k = 1):\r\n        if k==n:\r\n            return term(k)\r\n        return combiner(term(k), accumulate_seq(combiner, term, k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_seq(combiner, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 28, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_seq(combiner, term, k = 1):\r\n        if k==n:\r\n            return term(k)\r\n        return term(k)+accumulate_seq(combiner, term, k+1)\r\n        return combiner(term(k), accumulate_seq(combiner, term, k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_seq(combiner, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_seq(combiner, term, k = 1):\r\n        if k==n:\r\n            return term(k)\r\n        return term(k)+accumulate_seq(combiner, term, k+1)\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_seq(combiner, term))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in count_up\n    return combiner(term(count),count_up(count-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in count_up\n    if count == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def count_up(count):\r\n        if count==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(count), count_up(count-1))\r\n    if n==0:\r\n        return base\r\n    not_base = count_up(n)\r\n    return combiner(base, not_base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def count_up(count):\r\n        if count==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(count), count_up(count-1))\r\n    if n==0:\r\n        return base\r\n    not_base = count_up(n)\r\n    return combiner(base, not_base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def count_up(count):\r\n        if count==1:\r\n            return 1\r\n        else:\r\n            return combiner(term(count), count_up(count-1))\r\n    not_base = count_up(n)\r\n    return combiner(base, not_base)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(n, accumulate(combiner, base, n-1, term))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = base\r\n    while k<n+1:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = 1\r\n    total = base\r\n    while k<n+1:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    total = 1\r\n    while k<n+1:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        if n==0:\r\n            return base\r\n        else:\r\n            total = combiner(total, term(k))\r\n            k = k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        if n==0:\r\n            return base\r\n        else:\r\n            total = combiner(base, term(k))\r\n            total = combiner(total, term(k))\r\n            k = k+1\r\n    return total", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        if n==0:\r\n            return base\r\n        else:\r\n            total = combiner(base, term(k))\r\n            k = k+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<=(n):\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<=(n):\r\n        total = combiner(total, x)\r\n        total = combiner(total, term(x))\r\n        x = x+1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    total = base\r\n    while x<=(n):\r\n        total = combiner(total, x)\r\n        x = x+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(test_accumulate(combiner, base, n-1, term), term(n))\nNameError: name 'test_accumulate' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term, k = 1):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term, k = 1):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(test_accumulate(combiner, base, n-1, term), term(n))        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term, k = 1):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(test_accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n57\n\n# Error: expected\n#     15\n# but got\n#     57", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(n):\r\n        total = 0+combiner(total, term(i+1))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            172
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 57, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(n):\r\n        total = total+combiner(total, term(i+1))\r\n    return total\r\nfrom operator import add, mul        total = 0+combiner(total, term(i+1))\r\n    return total", 
    "removed": [
      3, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(n):\r\n        total = total+combiner(total, term(i+1))\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n57\n\n# Error: expected\n#     15\n# but got\n#     57", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, term(n+1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            69
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 57, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, term(n+1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(n+1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    lst = list(range(1, n+1))\r\n    lst2 = map(term, lst)\r\n    total = base\r\n    for value in lst2:\r\n        total = combiner(total, value)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    lst = list(range(1, n+1))\r\n    lst2 = map(term, lst)\r\n    total = 0\r\n    total = base\r\n    for value in lst2:\r\n        total = combiner(total, value)\r\n    return combiner(base, total)    return total", 
    "removed": [
      3, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    lst = list(range(1, n+1))\r\n    lst2 = map(term, lst)\r\n    total = 0\r\n    for value in lst2:\r\n        total = combiner(total, value)\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(combiner(term(n),term(n-1)),accumulate(combiner, base, n-2, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total, k = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, base\r\n    while n+1>k:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, base\r\n    while n+1>k:\r\n        total = combiner(total, term(n))\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k, total = 1, base\r\n    while n+1>k:\r\n        total = combiner(total, term(n))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    previous = base\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    previous = term(base)\r\n    previous = base\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    previous = term(base)\r\n    for i in range(1, n+1):\r\n        previous = combiner(previous, term(i))\r\n    return previous"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    total = combiner(total, term(i))\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    for i in range(1, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return k        base = combiner(base, term(i))\r\n    return base", 
    "removed": [
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return k"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    elif 1==n:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    elif n==n:\r\n    elif 1==n:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, 0)\r\n    elif n==n:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(combiner(term(n), term(n-1)), accumulate(combiner, base, n-2, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n55\n\n# Error: expected\n#     15\n# but got\n#     55", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "stack_locals": [], 
        "line": 5, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 55, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, combiner(base, term(n)), n-1, term))\r\nfrom operator import add, mul    return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, combiner(base, term(n)), n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    while n>0:\r\n        base = combiner(term(n), base)\r\n        n -= 1\r\n        if n==0:\r\n            total = combiner(base, total)\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        base = combiner(term(n), base)\r\n        n -= 1\r\n        if n==0:\r\n            total = combiner(base, total)\r\n    return total    return base", 
    "removed": [
      3, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        n -= 1\r\n        if n==0:\r\n            total = combiner(base, total)\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    ans = combiner(base, term(1))\r\n    i = 2\r\n    while i<=n:\r\n        ans = combiner(ans, term(i))\r\n        i += 1\r\n    return ans", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    ans = combiner(base, term(1))\r\n    i = 2\r\n    while i<=n:\r\n        ans = combiner(ans, term(i))\r\n        i += 1\r\n    return ans", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    ans = combiner(base, term(1))\r\n    i = 2\r\n    while i<=n:\r\n        ans = combiner(ans, term(i))\r\n        i += 1\r\n    return ans"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        result = base\r\n        while n!=0:\r\n            result = combiner(result, term(n))\r\n            n -= 1\r\n        return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        result = base\r\n        while n!=0:\r\n            result = combiner(result, term(n))\r\n            n -= 1\r\n            result = combiner(result, term(n))\r\n        return result", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        result = base\r\n        while n!=0:\r\n            n -= 1\r\n            result = combiner(result, term(n))\r\n        return result"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    if n==0:\r\n        return base\r\n    if k>0:\r\n        return combiner(term(n), accumulate(combiner, base, k-1, term))\r\n    else:\r\n        return combiner(base, term(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    if n==0:\r\n        return base\r\n    if k>0:\r\n        return combiner(term(n), accumulate(combiner, base, k-1, term))\r\n    else:\r\n        return combiner(base, term(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    if k>0:\r\n        return combiner(term(n), accumulate(combiner, base, k-1, term))\r\n    else:\r\n        return combiner(base, term(1))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     11\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    if n==0:\r\n        return base\r\n    result = 1\r\n    while x!=n:\r\n        x = x+1\r\n        result = combiner(result, term(x))\r\n    return combiner(result, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            140
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    if n==0:\r\n        return base\r\n    result = 1\r\n    while x!=n:\r\n        x = x+1\r\n        result = combiner(result, term(x))\r\n    return combiner(result, base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    result = 1\r\n    while x!=n:\r\n        x = x+1\r\n        result = combiner(result, term(x))\r\n    return combiner(result, base)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            172
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5, 
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    x = 1\r\n    while not x>n:\r\n        base = combiner(base, term(x))\r\n        x += 1\r\n    final = combiner(base, total)\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    x = 1\r\n    while not x>n:\r\n        total = combiner(total, term(x))\r\n        base = combiner(base, term(x))\r\n        x += 1\r\n    final = combiner(base, total)\r\n    return final    return base", 
    "removed": [
      4, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    x = 1\r\n    while not x>n:\r\n        total = combiner(total, term(x))\r\n        x += 1\r\n    final = combiner(base, total)\r\n    return final"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term(n)))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term(n)))\nTypeError: 'int' object is not callable\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            167
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term(n)))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term(n)))"
  }, 
  {
    "added": [
      2, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, i = base, 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            158
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, i = 1, 1\r\n    total, i = base, 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, i = 1, 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = increment(i)\r\n    return combiner(base, total)"
  }, 
  {
    "added": [], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n2\n3\n4\n5\n15\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        print(i)\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(helper(1), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        print(i)\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(helper(1), base)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        print(i)\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(helper(1), base)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n>=1):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    else:\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n>1):\r\n    if (n>=1):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    else:\r\n        return base", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n>1):\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    else:\r\n        return base"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if (n == 1):\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if (n==1):\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if (n==1):\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n==1):\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, n)\r\n    else:\r\n        base = combiner(base, term(n))\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(base, n)\r\n    else:\r\n        base = combiner(base, term(n))\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, n)\r\n    else:\r\n        base = combiner(base, term(n))\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    base = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    base = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    base = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        base = combiner(base, term(i))\r\n    return base"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n16\n\n# Error: expected\n#     72\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n    return base+combiner(term(n), accumulate(combiner, 0, n-1, term))        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n    return base+combiner(term(n), accumulate(combiner, 0, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n36\n\n# Error: expected\n#     72\n# but got\n#     36", 
    "after": "def accumulate(combiner, base, n, term):\r\n    accum = term(base)\r\n    if (base>1):\r\n        accum = base\r\n        base = 0\r\n    for i in range(base+1, n+1):\r\n        accum = combiner(accum, term(i))\r\n    return accum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 36, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    accum = term(base)\r\n    if (base>n):\r\n    if (base>1):\r\n        accum = base\r\n        base = 0\r\n    for i in range(base+1, n+1):\r\n        accum = combiner(accum, term(i))\r\n    return accum", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    accum = term(base)\r\n    if (base>n):\r\n        accum = base\r\n        base = 0\r\n    for i in range(base+1, n+1):\r\n        accum = combiner(accum, term(i))\r\n    return accum"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(j, k):\r\n        if j==0:\r\n            return base\r\n        elif k==j:\r\n            return combiner(base, term(k))\r\n        else:\r\n            return combiner(term(k), helper(j, k+1))\r\n    return helper(n, 1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(j, k):\r\n        if j==0:\r\n            return base\r\n        elif k==j:\r\n            return combiner(base, term(k))\r\n        else:\r\n            return combiner(term(k), helper(j, k+1))\r\n    return helper(n, 2)    return helper(n, 1)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(j, k):\r\n        if j==0:\r\n            return base\r\n        elif k==j:\r\n            return combiner(base, term(k))\r\n        else:\r\n            return combiner(term(k), helper(j, k+1))\r\n    return helper(n, 2)"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    if pred(term(y))==True:\nNameError: name 'pred' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = n\r\n    while y>=1:\r\n        x = combiner(x, term(y))\r\n        y -= 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = n\r\n    while y>=1:\r\n        if pred(term(y))==True:\r\n            x = combiner(x, term(y))\r\n        x = combiner(x, term(y))\r\n        y -= 1\r\n    return x", 
    "removed": [
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    y = n\r\n    while y>=1:\r\n        if pred(term(y))==True:\r\n            x = combiner(x, term(y))\r\n        y -= 1\r\n    return x"
  }, 
  {
    "added": [
      1, 
      2, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "stack_locals": [], 
        "line": 6, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 6, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if term(n)==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if term(base)==0:\r\n    if term(n)==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if term(base)==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            167
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n):\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n):\r\n        total = combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      9, 
      10, 
      11, 
      12, 
      13
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     26\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return combiner(total, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    while base<=n:\r\n        total = combiner(total, term(base))\r\n        base += 1\r\n    return total    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return combiner(total, base)", 
    "removed": [
      5, 
      6, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        total = 0\r\n    else:\r\n        total = 1\r\n    while base<=n:\r\n        total = combiner(total, term(base))\r\n        base += 1\r\n    return total"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            156
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in after_base\n    return combiner(term(i), after_base(combiner, n, term, i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in after_base\n    if i==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def after_base(combiner, n, term, i):\r\n        if i==n:\r\n            return term(n)\r\n        return combiner(term(i), after_base(combiner, n, term, i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, after_base(combiner, n, term, 1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def after_base(combiner, n, term, i):\r\n        if i==n:\r\n            return term(n)\r\n        return combiner(term(i), after_base(combiner, n, term, i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, after_base(combiner, n, term, 1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def after_base(combiner, n, term, i):\r\n        if i==n:\r\n            return term(n)\r\n        return combiner(term(i), after_base(combiner, n, term, i+1))\r\n    return combiner(base, after_base(combiner, n, term, 1))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if combiner==add:\r\n        i = 1\r\n        total = 0\r\n        while i<=n:\r\n            total = total+term(i)\r\n            i += 1\r\n        return base+total\r\n    else:\r\n        i = 1\r\n        total = 1\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        return base*total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if combiner=='add':\r\n    if combiner==add:\r\n        i = 1\r\n        total = 1\r\n        total = 0\r\n        while i<=n:\r\n            total = total+term(i)\r\n            i += 1\r\n        return base+total\r\n    else:\r\n        i = 1\r\n        total = 1\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        return base*total", 
    "removed": [
      1, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if combiner=='add':\r\n        i = 1\r\n        total = 1\r\n        while i<=n:\r\n            total = total+term(i)\r\n            i += 1\r\n        return base+total\r\n    else:\r\n        i = 1\r\n        total = 1\r\n        while i<=n:\r\n            total = total*term(i)\r\n            i += 1\r\n        return base*total"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate_helper\n    return combiner(newterm(k),accumulate_helper(x,newterm,k+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate_helper\n    if k==n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(x, newterm, k):\r\n        if k==n:\r\n            return newterm(x)\r\n        return combiner(newterm(k), accumulate_helper(x, newterm, k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_helper(n, term, 1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(x, newterm, k):\r\n        if k==n:\r\n            return newterm(x)\r\n        return combiner(newterm(k), accumulate_helper(x, newterm, k+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate_helper(n, term, 1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulate_helper(x, newterm, k):\r\n        if k==n:\r\n            return newterm(x)\r\n        return combiner(newterm(k), accumulate_helper(x, newterm, k+1))\r\n    return combiner(base, accumulate_helper(n, term, 1))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0 or combiner==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n    if n==0 or combiner==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    accumulation = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        accumulation = combiner(accumulation, term(i))\r\n    return accumulation", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    accumulation = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        accumulation = combiner(accumulation, term(i))\r\n    return accumulation", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    accumulation = combiner(base, term(1))\r\n    for i in range(2, n+1):\r\n        accumulation = combiner(accumulation, term(i))\r\n    return accumulation"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(base, n+1):\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(base, n+1):\r\n        total = combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    for n in range(1, n+1):\r\n        x = combiner(x, term(n))\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    for i in range(1, n+1):\r\n    for n in range(1, n+1):\r\n        x = combiner(x, term(n))\r\n    return x", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    for i in range(1, n+1):\r\n        x = combiner(x, term(n))\r\n    return x"
  }, 
  {
    "added": [
      3, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    accumulateTotal = base\r\n    counter = 1\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while counter<n+1:\r\n            accumulateTotal = combiner(accumulateTotal, term(counter))\r\n            counter += 1\r\n        return accumulateTotal", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    accumulateTotal = base\r\n    counter = 0\r\n    counter = 1\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while counter<n:\r\n        while counter<n+1:\r\n            accumulateTotal = combiner(accumulateTotal, term(counter))\r\n            counter += 1\r\n        return accumulateTotal", 
    "removed": [
      2, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    accumulateTotal = base\r\n    counter = 0\r\n    if n==0:\r\n        return base\r\n    else:\r\n        while counter<n:\r\n            accumulateTotal = combiner(accumulateTotal, term(counter))\r\n            counter += 1\r\n        return accumulateTotal"
  }, 
  {
    "added": [
      3, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    combine = base\r\n    while i<n:\r\n        i += 1\r\n        combine = combiner(combine, term(i))\r\n    return combine", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    combine = term(base)\r\n    combine = base\r\n    while i<n:\r\n        i += 1\r\n        combine = combiner(combine, term(i))\r\n    return combine\r\nfrom operator import add, mul    return combine", 
    "removed": [
      2, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 0\r\n    combine = term(base)\r\n    while i<n:\r\n        i += 1\r\n        combine = combiner(combine, term(i))\r\n    return combine\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    for i in range(1, n+1):\r\n        k = combiner(k, term(i))\r\n    return k", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = term(base)\r\n    k = base\r\n    for i in range(1, n+1):\r\n        k = combiner(k, term(i))\r\n    return k", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = term(base)\r\n    for i in range(1, n+1):\r\n        k = combiner(k, term(i))\r\n    return k"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    answer = base\r\n    while count<n+1:\r\n        answer = combiner(answer, term(count))\r\n        count += 1\r\n    return answer", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    answer = base\r\n    while count<n:\r\n    while count<n+1:\r\n        answer = combiner(answer, term(count))\r\n        count += 1\r\n    return answer", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    answer = base\r\n    while count<n:\r\n        answer = combiner(answer, term(count))\r\n        count += 1\r\n    return answer"
  }, 
  {
    "added": [
      4, 
      7, 
      10
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term_number = 0\r\n    result = base\r\n    if n==add:\r\n        while term_number<=n:\r\n            result += term(n)\r\n            return result\r\n    elif combiner==0:\r\n        while term_number<=n:\r\n            result *= term(term_number)\r\n            return result\r\n    def helper(a, n):\r\n        if n==0:\r\n            return a\r\n        else:\r\n            a = combiner(a, term(n))\r\n        return helper(a, n-1)\r\n    return helper(base, n)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term_number = 0\r\n    result = base\r\n    if combiner==add:\r\n    if n==add:\r\n        while term_number<=n:\r\n            result += term(term_number)\r\n            result += term(n)\r\n            return result\r\n    elif combiner==mul:\r\n    elif combiner==0:\r\n        while term_number<=n:\r\n            result *= term(term_number)\r\n            return result\r\n    def helper(a, n):\r\n        if n==0:\r\n            return a\r\n        else:\r\n            a = combiner(a, term(n))\r\n        return helper(a, n-1)\r\n    return helper(base, n)", 
    "removed": [
      3, 
      6, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term_number = 0\r\n    result = base\r\n    if combiner==add:\r\n        while term_number<=n:\r\n            result += term(term_number)\r\n            return result\r\n    elif combiner==mul:\r\n        while term_number<=n:\r\n            result *= term(term_number)\r\n            return result\r\n    def helper(a, n):\r\n        if n==0:\r\n            return a\r\n        else:\r\n            a = combiner(a, term(n))\r\n        return helper(a, n-1)\r\n    return helper(base, n)"
  }, 
  {
    "added": [
      9, 
      14
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 44, in accumulate\n    return le_count(combiner(1))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def le_count(combiner, i):\r\n        if n==i:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), le_count(combiner, i+1))\r\n    if n==0:\r\n        return base\r\n    if base==1:\r\n        return le_count(combiner(1))\r\n    else:\r\n        return combiner(base, le_count(combiner, 1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            168
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 13, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "stack_locals": [], 
        "line": 13, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 13, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def le_count(combiner, i):\r\n        if n==i:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), le_count(combiner, i+1))\r\n    if n==0:\r\n        return base\r\n    if base==0:\r\n    if base==1:\r\n        return le_count(combiner(1))\r\n    else:\r\n        return combiner(base, le_count(combiner, 1))\r\nfrom operator import add, mul        return combiner(base, le_count(combiner, 1))", 
    "removed": [
      8, 
      12, 
      13
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def le_count(combiner, i):\r\n        if n==i:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), le_count(combiner, i+1))\r\n    if n==0:\r\n        return base\r\n    if base==0:\r\n        return le_count(combiner(1))\r\n    else:\r\n        return combiner(base, le_count(combiner, 1))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    answer = base\r\n    for n in range(1, n+1):\r\n        answer = combiner(answer, term(n))\r\n    return answer", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    answer = base\r\n    for i in range(1, n+1):\r\n    for n in range(1, n+1):\r\n        answer = combiner(answer, term(n))\r\n    return answer", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    answer = base\r\n    for i in range(1, n+1):\r\n        answer = combiner(answer, term(n))\r\n    return answer"
  }, 
  {
    "added": [
      3, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner, base, n-1, term)\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    return combiner(n, term)\nTypeError: unsupported operand type(s) for +: 'int' and 'function'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(n, term)\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(n, term)\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            134
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), term(n-1))\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))\r\n    return accumulate(combiner, base, n-1, term)", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(base, term(0))\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), term(n-1))\r\n    return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n144\n\n# Error: expected\n#     72\n# but got\n#     144", 
    "after": "def accumulate(combiner, base, n, term):\r\n    initial = 0\r\n    if base>n:\r\n        initial = 0\r\n        total = base\r\n    else:\r\n        total = base\r\n    for i in range(initial, n):\r\n        total = combiner(total, term(i+1))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 144, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    initial = 0\r\n    if base>n:\r\n        initial = 0\r\n        total = base\r\n    else:\r\n        total = term(base)\r\n        total = base\r\n    for i in range(initial, n):\r\n        total = combiner(total, term(i+1))\r\n    return total", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    initial = 0\r\n    if base>n:\r\n        initial = 0\r\n        total = base\r\n    else:\r\n        total = term(base)\r\n    for i in range(initial, n):\r\n        total = combiner(total, term(i+1))\r\n    return total"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def accumulateHelp(count):\r\n        if count==n+1:\r\n            return base\r\n        return combiner(term(count), accumulateHelp(count+1))\r\n    return accumulateHelp(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def accumulateHelp(count):\r\n        if count==n+1:\r\n            return base\r\n        return combiner(term(count), accumulateHelp(count+1))\r\n    return accumulateHelp(0)    return accumulateHelp(1)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def accumulateHelp(count):\r\n        if count==n+1:\r\n            return base\r\n        return combiner(term(count), accumulateHelp(count+1))\r\n    return accumulateHelp(0)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total, k = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n46\n\n# Error: expected\n#     26\n# but got\n#     46", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n+base\r\n    elif combiner==mul:\r\n        return combiner(combiner(square(n), base), accumulate(combiner, 1, (n-1), term))\r\n    elif base>n:\r\n        return combiner(combiner(term(n), base), accumulate(combiner, 0, (n-1), term))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, (n-1), term))+base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 46, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n+base\r\n    elif combiner==mul:\r\n        return combiner(combiner(square(n), base), accumulate(combiner, 1, (n-1), term))\r\n    elif base>n:\r\n        return combiner(combiner(square(n), base), accumulate(combiner, 0, (n-1), term))\r\n        return combiner(combiner(term(n), base), accumulate(combiner, 0, (n-1), term))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, (n-1), term))+base", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n+base\r\n    elif combiner==mul:\r\n        return combiner(combiner(square(n), base), accumulate(combiner, 1, (n-1), term))\r\n    elif base>n:\r\n        return combiner(combiner(square(n), base), accumulate(combiner, 0, (n-1), term))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, 0, (n-1), term))+base"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def help1(R):\r\n        if R==n:\r\n            return combiner(base, term(n))\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return (combiner(term(R), help1(R+1)))\r\n    return help1(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def help1(R):\r\n        if R==n:\r\n            return term(n)\r\n            return combiner(base, term(n))\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return (combiner(term(R), help1(R+1)))\r\n    return help1(1)", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def help1(R):\r\n        if R==n:\r\n            return term(n)\r\n        if n==0:\r\n            return base\r\n        else:\r\n            return (combiner(term(R), help1(R+1)))\r\n    return help1(1)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n - 1, term))\nTypeError: <lambda>() takes 1 positional argument but 2 were given\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = lambda f: f(x, y)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    combiner = lambda f: f(x, y)\r\n    i = lambda f: f(x, y)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    combiner = lambda f: f(x, y)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "stack_locals": [], 
        "line": 5, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n-1), base)\r\nfrom operator import add, mul    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n-1), base)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in counter\n    return combiner(term(i), counter(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in counter\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, counter(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, counter(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), counter(i+1))\r\n    return combiner(base, counter(1))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def combining(combiner, base, n, term):\r\n        if n==0:\r\n            if combiner==mul:\r\n                return 1\r\n            return 0\r\n        else:\r\n            return combiner(term(n), combining(combiner, base, n-1, term))\r\n    return combiner(combining(combiner, base, n, term), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def combining(combiner, base, n, term):\r\n        if n==0:\r\n            if combiner==mul:\r\n                return 1\r\n            return 0\r\n        else:\r\n            return combiner(term(n), combining(combiner, base, n-1, term))\r\n    return combining(combiner, base, n, term)+base    return combiner(combining(combiner, base, n, term), base)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def combining(combiner, base, n, term):\r\n        if n==0:\r\n            if combiner==mul:\r\n                return 1\r\n            return 0\r\n        else:\r\n            return combiner(term(n), combining(combiner, base, n-1, term))\r\n    return combining(combiner, base, n, term)+base"
  }, 
  {
    "added": [
      4, 
      5, 
      6, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n44\n\n# Error: expected\n#     15\n# but got\n#     44", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return combiner(term(n), base)\r\n    elif n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 44, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    return combiner((term(n-1)), term(n))*n-1        return combiner(term(n), base)\r\n    elif n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    return combiner((term(n-1)), term(n))*n-1"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = base\r\n    while counter<n+1:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = base\r\n    while counter<n:\r\n    while counter<n+1:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    counter = 1\r\n    total = base\r\n    while counter<n:\r\n        total = combiner(total, term(counter))\r\n        counter += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    total, k ==base, 1\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k==base, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k==base, 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        base = combiner(total, term(i))\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i = 1\r\n    total = base\r\n    while i<=n:\r\n        base = combiner(total, term(i))\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for k in range(1, n+1):\r\n        total = combiner(total, term(k))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            165
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for k in range(1, n+1):\r\n        total = combiner(total, term(k))        total = combiner(total, term(k))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for k in range(1, n+1):\r\n        total = combiner(total, term(k))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        combiner(total, term(i))\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      10, 
      11, 
      12, 
      13
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    if combiner==add:\r\n        combined_terms = 0\r\n    else:\r\n        combined_terms = 1\r\n    while count<(n+1):\r\n        combined_terms = combiner(combined_terms, term(count))\r\n        count += 1\r\n    if combiner==add:\r\n        return base+combined_terms\r\n    else:\r\n        return base*combined_terms", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    if combiner==add:\r\n        combined_terms = 0\r\n    else:\r\n        combined_terms = 1\r\n    while count<(n+1):\r\n        combined_terms = combiner(combined_terms, term(count))\r\n        count += 1\r\n    return base+combined_terms    if combiner==add:\r\n        return base+combined_terms\r\n    else:\r\n        return base*combined_terms", 
    "removed": [
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    count = 1\r\n    if combiner==add:\r\n        combined_terms = 0\r\n    else:\r\n        combined_terms = 1\r\n    while count<(n+1):\r\n        combined_terms = combiner(combined_terms, term(count))\r\n        count += 1\r\n    return base+combined_terms"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    base = combiner(base, (n ** term))\nTypeError: unsupported operand type(s) for ** or pow(): 'int' and 'function'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    while (n>0):\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    while (n>0):\r\n        base = combiner(base, (n**term))\r\n        base = combiner(base, term(n))\r\n        n -= 1\r\n    return base", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    while (n>0):\r\n        base = combiner(base, (n**term))\r\n        n -= 1\r\n    return base"
  }, 
  {
    "added": [
      1, 
      2, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i), helper(combiner, n, i + 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(combiner, n, i, term):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(combiner, n, i+1, term))\r\n    return combiner(base, helper(combiner, n, 1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(combiner, n, i, term):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(combiner, n, i+1, term))\r\n    return combiner(base, helper(combiner, n, 1, term))\r\nfrom operator import add, mul    return combiner(base, helper(combiner, n, 1, term))", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, i, term):\r\n        if i==n:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(i), helper(combiner, n, i+1, term))\r\n    return combiner(base, helper(combiner, n, 1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner (term(n), accumulate(combiner, base, n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n==1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    k = 1\r\n    while k<=n:\r\n        result, k = combiner(result, term(k)), k+1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    while base<=n:\r\n        result, base = combiner(result, term(base)), base+1\r\n    k = 1\r\n    while k<=n:\r\n        result, k = combiner(result, term(k)), k+1\r\n    return result", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    while base<=n:\r\n        result, base = combiner(result, term(base)), base+1\r\n    return result"
  }, 
  {
    "added": [
      5, 
      6, 
      7, 
      8, 
      11, 
      12, 
      13, 
      14
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        if combiner==mul:\r\n            if term==identity:\r\n                base *= i\r\n            elif term==square:\r\n                base *= square(i)\r\n        elif combiner==add:\r\n            if term==identity:\r\n                base += i\r\n            elif term==square:\r\n                base += square(i)\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        if combiner==mul:\r\n            base *= i\r\n            if term==identity:\r\n                base *= i\r\n            elif term==square:\r\n                base *= square(i)\r\n        elif combiner==add:\r\n            base += i\r\n            if term==identity:\r\n                base += i\r\n            elif term==square:\r\n                base += square(i)\r\n    return base", 
    "removed": [
      4, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1):\r\n        if combiner==mul:\r\n            base *= i\r\n        elif combiner==add:\r\n            base += i\r\n    return base"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    i = 1\r\n    while (i<=n):\r\n        x = combiner(x, term(i))\r\n        i += 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            146
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            130
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    i = 1\r\n    while (i<=n):\r\n        base = combiner(base, term(i))\r\n        x = combiner(x, term(i))\r\n        i += 1\r\n    return x", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    i = 1\r\n    while (i<=n):\r\n        base = combiner(base, term(i))\r\n        i += 1\r\n    return x"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            148
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n16\n\n# Error: expected\n#     72\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            119
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            126
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return term(n)+accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      4, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    for i in range(1, n+1):\r\n        base = combiner(base, term(i))\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    for i in range(1, n+1):\r\n        a = combiner(base, term(i))\r\n    return a        base = combiner(base, term(i))\r\n    return base", 
    "removed": [
      2, 
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    for i in range(1, n+1):\r\n        a = combiner(base, term(i))\r\n    return a"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    accumulation, k = base, 1\r\n    while k<=n:\r\n        accumulation = combiner(accumulation, term(k))\r\n        k += 1\r\n    return accumulation", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    accumulation, k = base, 1\r\n    while k<=n:\r\n        combiner(accumulation, term(k))\r\n        accumulation = combiner(accumulation, term(k))\r\n        k += 1\r\n    return accumulation", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    accumulation, k = base, 1\r\n    while k<=n:\r\n        combiner(accumulation, term(k))\r\n        k += 1\r\n    return accumulation"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    acc, i = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    acc, i = base, 1\r\n    while i<=n:\r\n        acc = combiner(term(i), acc)\r\n        i += 1\r\n    return acc", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    acc, i = start, 1\r\n    acc, i = base, 1\r\n    while i<=n:\r\n        acc = combiner(term(i), acc)\r\n        i += 1\r\n    return acc", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    acc, i = start, 1\r\n    while i<=n:\r\n        acc = combiner(term(i), acc)\r\n        i += 1\r\n    return acc"
  }, 
  {
    "added": [
      2, 
      3, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "stack_locals": [], 
        "line": 5, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 5, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))\r\nfrom operator import add, mul    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "removed": [
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, accumulate(combiner, base, n-1, term))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(n, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n0\n\n# Error: expected\n#     11\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(x, term):\r\n        if x==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(x), helper(x-1, term))\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, helper(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            175
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(x, term):\r\n        if x==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(x), helper(x-1, term))\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, helper(n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(x, term):\r\n        if x==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(x), helper(x-1, term))\r\n    if n==0:\r\n        return term(0)\r\n    return combiner(base, helper(n, term))"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in more_term\n    return combiner(term(n), more_term(combiner, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in more_term\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def more_term(combiner, n, term):\r\n        if n==1:\r\n            return 1\r\n        return combiner(term(n), more_term(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, more_term(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def more_term(combiner, n, term):\r\n        if n==1:\r\n            return 1\r\n        return combiner(term(n), more_term(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, more_term(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def more_term(combiner, n, term):\r\n        if n==1:\r\n            return 1\r\n        return combiner(term(n), more_term(combiner, n-1, term))\r\n    return combiner(base, more_term(combiner, n, term))"
  }, 
  {
    "added": [
      5, 
      6
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    return combiner(term(n), helper(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in helper\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), helper(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, helper(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            151
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), helper(combiner, n-1, term))\r\n    if n==0:\r\n        return base\r\n    return combiner(base, helper(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(combiner, n, term):\r\n        if n==1:\r\n            return term(1)\r\n        return combiner(term(n), helper(combiner, n-1, term))\r\n    return combiner(base, helper(combiner, n, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(n)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total = start\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(1, n+1, 1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = start\r\n    total = base\r\n    for i in range(1, n+1, 1):\r\n        total = combiner(total, term(i))\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = start\r\n    for i in range(1, n+1, 1):\r\n        total = combiner(total, term(i))\r\n    return total"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n11\n\n# Error: expected\n#     26\n# but got\n#     11", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 11, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(base, n+1):\r\n    for i in range(1, n+1):\r\n        result = combiner(result, term(i))\r\n    return result", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(base, n+1):\r\n        result = combiner(result, term(i))\r\n    return result"
  }, 
  {
    "added": [
      6, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return term(n)+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return term(n)*accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return n+accumulate(combiner, base, n-1, term)\r\n            return term(n)+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return n*accumulate(combiner, base, n-1, term)            return term(n)*accumulate(combiner, base, n-1, term)", 
    "removed": [
      5, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        if combiner==add:\r\n            return n+accumulate(combiner, base, n-1, term)\r\n        else:\r\n            return n*accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, n), n-1, term)        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, n), n-1, term)"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    def accumulater(combiner, base, n, term, total):\r\n        if n>0:\r\n            total = combiner(total, term(n))\r\n            return accumulater(combiner, base, n-1, term, total)\r\n        else:\r\n            return total\r\n    return accumulater(combiner, base, n, term, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    def accumulater(combiner, base, n, term, total):\r\n        if n>0:\r\n            total = combiner(total, term(n))\r\n            return accumulater(combiner, base, n-1, term, total)\r\n        else:\r\n            return total            return total\r\n    return accumulater(combiner, base, n, term, total)", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    def accumulater(combiner, base, n, term, total):\r\n        if n>0:\r\n            total = combiner(total, term(n))\r\n            return accumulater(combiner, base, n-1, term, total)\r\n        else:\r\n            return total"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    for x in range(1, n+1):\r\n        base = combiner(base, term(x))\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    for x in range(2, n+1):\r\n    for x in range(1, n+1):\r\n        base = combiner(base, term(x))\r\n    return base", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    for x in range(2, n+1):\r\n        base = combiner(base, term(x))\r\n    return base"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      3, 
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(base), accumulate(combiner, base+1, n, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if base == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if base==n:\r\n        return term(base)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(base), accumulate(combiner, base+1, n, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if base==n:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(base), accumulate(combiner, base+1, n, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    total, k = combiner * total * term(k), k + 1\nTypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner*total*term(k), k+1\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner*total*term(k), k+1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k, product = 1, base\r\n    while k<=n:\r\n        product, k = combiner(product, term(k)), k+1\r\n    return product", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k, product = 1, 1\r\n    k, product = 1, base\r\n    while k<=n:\r\n        product, k = combiner(product, term(k)), k+1\r\n    return product", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k, product = 1, 1\r\n    while k<=n:\r\n        product, k = combiner(product, term(k)), k+1\r\n    return product"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    a = combiner(a, term(i))\nNameError: name 'i' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a, b = base, 1\r\n    while b<=n:\r\n        a = combiner(a, term(b))\r\n        b = b+1\r\n    return a", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    a, b = base, 1\r\n    while b<=n:\r\n        a = combiner(a, term(i))\r\n        a = combiner(a, term(b))\r\n        b = b+1\r\n    return a", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    a, b = base, 1\r\n    while b<=n:\r\n        a = combiner(a, term(i))\r\n        b = b+1\r\n    return a"
  }, 
  {
    "added": [
      5, 
      6, 
      7, 
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def value(a, b = 0):\r\n        if a<=n:\r\n            if combiner(term(a), b)==0:\r\n                b = combiner(term(a), 1)\r\n                b = combiner(term(a), b)\r\n                return value(a+1, b)\r\n            b = combiner(term(a), b)\r\n            return value(a+1, b)\r\n        return combiner(b, base)\r\n    return value(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def value(a, b = 0):\r\n        if a<=n:\r\n            if combiner(term(a), b)==0:\r\n                b = combiner(term(a), 1)\r\n                b = combiner(term(a), b)\r\n                return value(a+1, b)\r\n            b = combiner(term(a), b)\r\n            return value(a+1, b)\r\n        return combiner(b, base)\r\n    return value(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def value(a, b = 0):\r\n        if a<=n:\r\n            b = combiner(term(a), b)\r\n            return value(a+1, b)\r\n        return combiner(b, base)\r\n    return value(1)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner(c, term(i))\nNameError: name 'c' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(c, term(i))\r\n        total = combiner(total, term(i))\r\n        i = i+1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(c, term(i))\r\n        i = i+1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n9\n\n# Error: expected\n#     15\n# but got\n#     9", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            172
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 9, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), term(n-1))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(term(n), term(n-1))"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, a = base, 1\r\n    while a<=n:\r\n        total, a = combiner(total, term(a)), a+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, a = 0, 1\r\n    total, a = base, 1\r\n    while a<=n:\r\n        total, a = combiner(total, term(a)), a+1\r\n    return combiner(base, total)    return total", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, a = 0, 1\r\n    while a<=n:\r\n        total, a = combiner(total, term(a)), a+1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, n, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, n, n-1, term))"
  }, 
  {
    "added": [
      3, 
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def add_accu(n, term):\r\n        k, total = 1, base\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k += 1\r\n        return total\r\n    return add_accu(n, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def add_accu(n, term):\r\n        k, total = 1, 0\r\n        k, total = 1, base\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k += 1\r\n        return total\r\n    return combiner(base, add_accu(n, term))    return add_accu(n, term)", 
    "removed": [
      2, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def add_accu(n, term):\r\n        k, total = 1, 0\r\n        while k<=n:\r\n            total = combiner(total, term(k))\r\n            k += 1\r\n        return total\r\n    return combiner(base, add_accu(n, term))"
  }, 
  {
    "added": [
      5, 
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total, i = base, 1\r\n        while i<=n:\r\n            total = combiner(term(i), total)\r\n            i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "stack_locals": [], 
        "line": 10, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 10, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total, i = 0, 1\r\n        total, i = base, 1\r\n        while i<=n:\r\n            total = combiner(term(i), total)\r\n            i += 1\r\n    return combiner(base, total)\r\nfrom operator import add, mul    return total", 
    "removed": [
      4, 
      9, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        total, i = 0, 1\r\n        while i<=n:\r\n            total = combiner(term(i), total)\r\n            i += 1\r\n    return combiner(base, total)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      11, 
      12, 
      13, 
      14
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==mul:\r\n        total = 1\r\n    if combiner==add:\r\n        total = 0\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==mul:\r\n        total = 1\r\n    if combiner==add:\r\n        total = 0\r\n    counter = 1\r\n    while counter<=n:\r\n        total = combiner(total, term(counter))\r\n        n += 1\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return combiner(base, total)", 
    "removed": [
      7, 
      8, 
      9, 
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==mul:\r\n        total = 1\r\n    if combiner==add:\r\n        total = 0\r\n    counter = 1\r\n    while counter<=n:\r\n        total = combiner(total, term(counter))\r\n        n += 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3, 
      7, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    next_acc = combiner(term(n), acc)\nNameError: name 'acc' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return acc\r\n        return base\r\n    else:\r\n        next_acc = combiner(term(n), acc)\r\n        return accumulate(combiner, next_acc, n-1, term)        base = combiner(term(n), base)\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      2, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return acc\r\n    else:\r\n        next_acc = combiner(term(n), acc)\r\n        return accumulate(combiner, next_acc, n-1, term)"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            132
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            28
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = 0, 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return total"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return n\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    term_no = n\r\n    value = base\r\n    while term_no>=1:\r\n        value = combiner(value, term(term_no))\r\n        term_no -= 1\r\n    return value", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    term_no = n\r\n    value = base\r\n    while term_no>=0:\r\n    while term_no>=1:\r\n        value = combiner(value, term(term_no))\r\n        term_no -= 1\r\n    return value", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    term_no = n\r\n    value = base\r\n    while term_no>=0:\r\n        value = combiner(value, term(term_no))\r\n        term_no -= 1\r\n    return value"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n81\n\n# Error: expected\n#     26\n# but got\n#     81", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 81, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, base, n-1, term)))"
  }, 
  {
    "added": [
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in producer\n    return combiner(term(i), producer(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in producer\n    if base == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def producer(i):\r\n        if base==n:\r\n            return combiner(base, base)\r\n        if i==n:\r\n            return combiner(term(i), base)\r\n        else:\r\n            return combiner(term(i), producer(i+1))\r\n    if n==0:\r\n        return base\r\n    return producer(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def producer(i):\r\n        if base==n:\r\n            return combiner(base, base)\r\n        if i==n:\r\n            return combiner(term(i), base)\r\n        else:\r\n            return combiner(term(i), producer(i+1))\r\n    if n==0:\r\n        return base\r\n    return producer(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def producer(i):\r\n        if base==n:\r\n            return combiner(base, base)\r\n        if i==n:\r\n            return combiner(term(i), base)\r\n        else:\r\n            return combiner(term(i), producer(i+1))\r\n    return producer(1)"
  }, 
  {
    "added": [
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    totalAccumulate = 0\r\n    while n>=1:\r\n        base = combiner(base, term(n))\r\n        n = n-1\r\n    return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    totalAccumulate = 0\r\n    while n>=1:\r\n        totalAccumulate = combiner(base, term(n))\r\n        base = combiner(base, term(n))\r\n        n = n-1\r\n    return totalAccumulate    return base", 
    "removed": [
      3, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    totalAccumulate = 0\r\n    while n>=1:\r\n        totalAccumulate = combiner(base, term(n))\r\n        n = n-1\r\n    return totalAccumulate"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n\n# Error: expected\n#     15\n# but got\n#     ", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        accumulate(combiner, base, n-1, term)        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(n), base)\r\n    else:\r\n        accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            166
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            162
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n        return base\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return 0\r\n    return combiner(base, accumulate(combiner, term(n), n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 2\r\n    if n==0:\r\n        return base\r\n    total = combiner(base, term(1))\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 2\r\n    if n==0:\r\n        return base\r\n    total = combiner(base, term(1))\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 2\r\n    total = combiner(base, term(1))\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n57\n\n# Error: expected\n#     15\n# but got\n#     57", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n>0:\r\n        for x in range(1, n+1):\r\n            result = combiner(result, term(x))\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            157
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 57, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n>0:\r\n        for x in range(1, n+1):\r\n            result += combiner(result, term(x))\r\n            result = combiner(result, term(x))\r\n    return result", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    if n>0:\r\n        for x in range(1, n+1):\r\n            result += combiner(result, term(x))\r\n    return result"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    current = 1\r\n    while current<=n:\r\n        total = combiner(total, term(current))\r\n        current += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            176
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = term(base)\r\n    total = base\r\n    current = 1\r\n    while current<=n:\r\n        total = combiner(total, term(current))\r\n        current += 1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = term(base)\r\n    current = 1\r\n    while current<=n:\r\n        total = combiner(total, term(current))\r\n        current += 1\r\n    return total"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in accumulate\n    return combiner(base,accumulate(combiner,n-1,term))\nTypeError: accumulate() missing 1 required positional argument: 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(base, accumulate(combiner, n-1, term))        return accumulate(combiner, combiner(base, term(n)), n-1, term)", 
    "removed": [
      3, 
      4, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(base, accumulate(combiner, n-1, term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n10\n\n# Error: expected\n#     15\n# but got\n#     10", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        i = 1\r\n        accumulation = base\r\n        while i<n+1:\r\n            accumulation = combiner(accumulation, term(i))\r\n            i += 1\r\n        return accumulation", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 10, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        i = 1\r\n        accumulation = base\r\n        while i<n:\r\n        while i<n+1:\r\n            accumulation = combiner(accumulation, term(i))\r\n            i += 1\r\n        return accumulation", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        i = 1\r\n        accumulation = base\r\n        while i<n:\r\n            accumulation = combiner(accumulation, term(i))\r\n            i += 1\r\n        return accumulation"
  }, 
  {
    "added": [
      4, 
      10, 
      11, 
      12, 
      13, 
      14, 
      15
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n2\n\n# Error: expected\n#     72\n# but got\n#     2", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def function(operation, n, term, total, i = 1):\r\n        if i>n:\r\n            return total\r\n        total = operation(total, term(i))\r\n        return function(operation, n, term, total, i+1)\r\n    if combiner==mul:\r\n        total = 1\r\n    else:\r\n        total = 0\r\n    return combiner(base, function(combiner, n, term, total))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 2, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def function(operation, n, term, i = 1, total = 0):\r\n        if operation==mul:\r\n            total = 1\r\n    def function(operation, n, term, total, i = 1):\r\n        if i>n:\r\n            return total\r\n        total = operation(total, term(i))\r\n        return function(operation, n, term, i+1, total)\r\n    return combiner(base, function(combiner, n, term))        return function(operation, n, term, total, i+1)\r\n    if combiner==mul:\r\n        total = 1\r\n    else:\r\n        total = 0\r\n    return combiner(base, function(combiner, n, term, total))", 
    "removed": [
      1, 
      2, 
      3, 
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def function(operation, n, term, i = 1, total = 0):\r\n        if operation==mul:\r\n            total = 1\r\n        if i>n:\r\n            return total\r\n        total = operation(total, term(i))\r\n        return function(operation, n, term, i+1, total)\r\n    return combiner(base, function(combiner, n, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = base\r\n    for i in range(1, n+1):\r\n        x = combiner(x, term(i))\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 0\r\n    x = base\r\n    for i in range(1, n+1):\r\n        x = combiner(x, term(i))\r\n    return combiner(base, x)    return x", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 0\r\n    for i in range(1, n+1):\r\n        x = combiner(x, term(i))\r\n    return combiner(base, x)"
  }, 
  {
    "added": [
      2, 
      3, 
      10
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    if n==0:\r\n        return base\r\n    Total = term(a)\r\n    while a<n:\r\n        Total = combiner(Total, term(a+1))\r\n        a += 1\r\n    return combiner(base, Total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    if n==0:\r\n        return base\r\n    Total = term(a)\r\n    while a<n:\r\n        Total = combiner(Total, term(a+1))\r\n        a += 1\r\n    return combiner(base, Total)\r\nfrom operator import add, mul    return combiner(base, Total)", 
    "removed": [
      8, 
      9
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    Total = term(a)\r\n    while a<n:\r\n        Total = combiner(Total, term(a+1))\r\n        a += 1\r\n    return combiner(base, Total)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      11
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i, k):\r\n        if i>n:\r\n            return k\r\n        else:\r\n            k = combiner(k, term(i))\r\n            return helper(i+1, k)\r\n    if combiner==add:\r\n        return helper(1, 0)+base\r\n    else:\r\n        return combiner(helper(1, 1), base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i, k):\r\n        if i>n:\r\n            return k\r\n        else:\r\n            k = combiner(k, term(i))\r\n            return helper(i+1, k)\r\n    if combiner==add:\r\n        return helper(1, 0)+base\r\n    else:\r\n        return helper(1, 1)+base        return combiner(helper(1, 1), base)", 
    "removed": [
      10
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i, k):\r\n        if i>n:\r\n            return k\r\n        else:\r\n            k = combiner(k, term(i))\r\n            return helper(i+1, k)\r\n    if combiner==add:\r\n        return helper(1, 0)+base\r\n    else:\r\n        return helper(1, 1)+base"
  }, 
  {
    "added": [
      3, 
      4, 
      5, 
      6, 
      9
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n7237\n\n# Error: expected\n#     25\n# but got\n#     7237", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    if combiner==add:\r\n        final_number = 0\r\n    elif combiner==mul:\r\n        final_number = 1\r\n    while k>0:\r\n        final_number, k = combiner(final_number, term(k)), k-1\r\n    return combiner(base, final_number)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 7237, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    final_number = 0\r\n    if combiner==add:\r\n        final_number = 0\r\n    elif combiner==mul:\r\n        final_number = 1\r\n    while k>0:\r\n        final_number, k = combiner(term(final_number), term(k)), k-1\r\n        final_number, k = combiner(final_number, term(k)), k-1\r\n    return combiner(base, final_number)", 
    "removed": [
      2, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = n\r\n    final_number = 0\r\n    while k>0:\r\n        final_number, k = combiner(term(final_number), term(k)), k-1\r\n    return combiner(base, final_number)"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper_function\n    return combiner(term(n), helper_function(combiner, n - 1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper_function\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper_function(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_function(combiner, n-1, term))\r\n    return combiner(base, helper_function(combiner, n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper_function(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_function(combiner, n-1, term))\r\n    return combiner(base, helper_function(combiner, n, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper_function(combiner, n, term):\r\n        if n==1:\r\n            return term(n)\r\n        else:\r\n            return combiner(term(n), helper_function(combiner, n-1, term))\r\n    return combiner(base, helper_function(combiner, n, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    total, k = start, 1\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, k = start, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n), accumalate(combiner, base, n-1, term))\nNameError: name 'accumalate' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            36
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumalate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0 or n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumalate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    t = combiner(t,term(i))\nUnboundLocalError: local variable 't' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x, i = base, 1\r\n    while i<=n:\r\n        x = combiner(x, term(i))\r\n        i += 1\r\n    return x", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            85
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        x = combiner(x, term(i))\r\n        i += 1\r\n    return t    return x", 
    "removed": [
      3, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x, i = base, 1\r\n    while i<=n:\r\n        t = combiner(t, term(i))\r\n        i += 1\r\n    return t"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 42, in helper\n    return combiner(term(a),  helper(a+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in helper\n    if a == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(a):\r\n        if a==n:\r\n            return combiner(base, term(a))\r\n        else:\r\n            return combiner(term(a), helper(a+1))\r\n    return helper(1)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            157
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            177
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(a):\r\n        if a==n:\r\n            return combiner(base, term(a))\r\n        else:\r\n            return combiner(term(a), helper(a+1))\r\n    return helper(1)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(a):\r\n        if a==n:\r\n            return combiner(base, term(a))\r\n        else:\r\n            return combiner(term(a), helper(a+1))\r\n    return helper(1)"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<0:\r\n        return base\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            164
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            171
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<0:\r\n        return base\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, (n-1), term))        return combiner(term(n), accumulate(combiner, base, (n-1), term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<0:\r\n        return base\r\n    elif n==0:\r\n        return base\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, (n-1), term))"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(term(n),accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            160
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base+term(1)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    while n>=1:\r\n        acc_sum = combiner(acc_sum, term(n))\r\n        n -= 1\r\n    return acc_sum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            163
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            153
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    while n>1:\r\n    while n>=1:\r\n        acc_sum = combiner(acc_sum, term(n))\r\n        n -= 1\r\n    return acc_sum", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    while n>1:\r\n        acc_sum = combiner(acc_sum, term(n))\r\n        n -= 1\r\n    return acc_sum"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in combine\n    return combiner(term(i) , combine(i - 1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in combine\n    if i == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = 0\r\n    if n==0:\r\n        return base\r\n    def combine(i):\r\n        if i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), combine(i-1))\r\n    return combiner(base, combine(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            41
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            70
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = 0\r\n    if n==0:\r\n        return base\r\n    def combine(i):\r\n        if i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), combine(i-1))\r\n    return combiner(base, combine(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = 0\r\n    def combine(i):\r\n        if i==1:\r\n            return term(1)\r\n        else:\r\n            return combiner(term(i), combine(i-1))\r\n    return combiner(base, combine(n))"
  }, 
  {
    "added": [
      6, 
      7, 
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    k = 1\r\n    while k<=n:\r\n        acc_sum = combiner(acc_sum, term(k))\r\n        k += 1\r\n    return acc_sum", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            75
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    index = 1\r\n    while index<=n:\r\n        acc_sum = combiner(acc_sum, term(n))\r\n        index += 1\r\n    k = 1\r\n    while k<=n:\r\n        acc_sum = combiner(acc_sum, term(k))\r\n        k += 1\r\n    return acc_sum", 
    "removed": [
      2, 
      3, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    acc_sum = base\r\n    index = 1\r\n    while index<=n:\r\n        acc_sum = combiner(acc_sum, term(n))\r\n        index += 1\r\n    return acc_sum"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n37\n\n# Error: expected\n#     26\n# but got\n#     37", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i, total = 0, base\r\n    if n==0:\r\n        return total\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        i += 1\r\n        n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            52
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 37, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i, total = 0, base\r\n    if n==0:\r\n        return total\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        i += 1\r\n        n -= 1\r\n    return combiner(base, total)    return total", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i, total = 0, base\r\n    if n==0:\r\n        return total\r\n    while n>0:\r\n        total = combiner(term(n), total)\r\n        i += 1\r\n        n -= 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    num = 1\r\n    if n==0:\r\n        return base\r\n    total = combiner(base, term(num))\r\n    for x in range(2, n+1):\r\n        num = term(x)\r\n        total = combiner(total, num)\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    num = 1\r\n    if n==0:\r\n        return base\r\n    total = combiner(base, term(num))\r\n    for x in range(2, n+1):\r\n        num = term(x)\r\n        total = combiner(total, num)\r\n    return total", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    num = 1\r\n    total = combiner(base, term(num))\r\n    for x in range(2, n+1):\r\n        num = term(x)\r\n        total = combiner(total, num)\r\n    return total"
  }, 
  {
    "added": [
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n0\n\n# Error: expected\n#     15\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        total = base\r\n        base = combiner(total, term(n))\r\n        return accumulate(combiner, base, n-1, term)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 0, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        total = base\r\n        total = combiner(total, term(n))\r\n        base = combiner(total, term(n))\r\n        return accumulate(combiner, base, n-1, term)", 
    "removed": [
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<1:\r\n        return base\r\n    else:\r\n        total = base\r\n        total = combiner(total, term(n))\r\n        return accumulate(combiner, base, n-1, term)"
  }, 
  {
    "added": [
      1
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    elif pred(n) == False:\nTypeError: 'bool' object is not callable\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term, pred = True):\r\ndef accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif pred(n)==False:\r\n        return accumulate(combiner, base, n-1, term)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      0, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term, pred = True):\r\n    if n==0:\r\n        return base\r\n    elif pred(n)==False:\r\n        return accumulate(combiner, base, n-1, term)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            82
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return term(base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total):\r\n        if i>n:\r\n            return total\r\n        else:\r\n            total = combiner(total, term(i))\r\n            return helper(i+1, total)\r\n    return helper(1, base)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total):\r\n        if i>n:\r\n            return total\r\n        else:\r\n            total = combiner(total, term(i))\r\n            return helper(i+1, total)\r\n    return helper(1, 1)    return helper(1, base)", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i, total):\r\n        if i>n:\r\n            return total\r\n        else:\r\n            total = combiner(total, term(i))\r\n            return helper(i+1, total)\r\n    return helper(1, 1)"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n2\n\n# Error: expected\n#     72\n# but got\n#     2", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    for i in range(0, n):\r\n        total = combiner(total, term(i+1))\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 2, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    total = base\r\n    for i in range(0, n):\r\n        total = combiner(total, term(i+1))\r\n    return base+total    return total", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 0\r\n    for i in range(0, n):\r\n        total = combiner(total, term(i+1))\r\n    return base+total"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n4\n\n# Error: expected\n#     15\n# but got\n#     4", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            129
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 4, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n-1), base)        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(term(1), base)\r\n    else:\r\n        return combiner(term(n-1), base)"
  }, 
  {
    "added": [
      3, 
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return accumulate(combiner(base, term(n + 1)), n, term) + base\nTypeError: accumulate() missing 1 required positional argument: 'term'\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return (combiner(term(n), accumulate(combiner, base, n-1, term)))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            127
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return accumulate(combiner(base, term(n+1)), n, term)+base        return (combiner(term(n), accumulate(combiner, base, n-1, term)))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return accumulate(combiner(base, term(n+1)), n, term)+base"
  }, 
  {
    "added": [
      3
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    for i in range(start, n + 1):\nNameError: name 'start' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(1, n+1):\r\n        result = combiner(term(i), result)\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            124
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            118
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(start, n+1):\r\n    for i in range(1, n+1):\r\n        result = combiner(term(i), result)\r\n    return result", 
    "removed": [
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    for i in range(start, n+1):\r\n        result = combiner(term(i), result)\r\n    return result"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulate\n    return combiner(accumulate(combiner, base, n - 1, term), term(n))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    if n == base:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            122
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            125
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n        return base\r\n    else:\r\n        return combiner(accumulate(combiner, base, n-1, term), term(n))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n57\n\n# Error: expected\n#     15\n# but got\n#     57", 
    "after": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    b = base\r\n    while a<=n:\r\n        b = 0+combiner(b, term(a))\r\n        a += 1\r\n    return b", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            123
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            136
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 57, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    b = base\r\n    while a<=n:\r\n        b = b+combiner(b, term(a))\r\n        b = 0+combiner(b, term(a))\r\n        a += 1\r\n    return b", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    a = 1\r\n    b = base\r\n    while a<=n:\r\n        b = b+combiner(b, term(a))\r\n        a += 1\r\n    return b"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n14\n\n# Error: expected\n#     15\n# but got\n#     14", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 14, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            155
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 41, in helper\n    return combiner(term(i),helper(i+1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in helper\n    if i == n:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return combiner(base, helper(1))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            178
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            173
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    def helper(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return combiner(base, helper(1))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(i):\r\n        if i==n:\r\n            return term(i)\r\n        else:\r\n            return combiner(term(i), helper(i+1))\r\n    return combiner(base, helper(1))"
  }, 
  {
    "added": [
      3, 
      4, 
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n30\n\n# Error: expected\n#     15\n# but got\n#     30", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            180
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            179
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 30, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if base==n:\r\n        return term(base)\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base+1, n, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      2, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if base==n:\r\n        return term(base)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base+1, n, term))"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner(term(n), total)\nUnboundLocalError: local variable 'total' referenced before assignment\n\n# Error: expected\n#     15\n# but got\n#     UnboundLocalError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, k = base, 1\r\n    while k<=n:\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            141
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            133
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result, k = base, 1\r\n    total, k = base, 1\r\n    while k<=n:\r\n        k += 1\r\n        total = combiner(term(n), total)\r\n        total, k = combiner(term(k), total), k+1\r\n    return total", 
    "removed": [
      1, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result, k = base, 1\r\n    while k<=n:\r\n        k += 1\r\n        total = combiner(term(n), total)\r\n    return total"
  }, 
  {
    "added": [
      2, 
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    total = combiner(term(i)) + base\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    i, total = 1, base\r\n    while i<=n:\r\n        total = combiner(term(i), total)\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            120
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            152
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    i, total = 1, 1\r\n    i, total = 1, base\r\n    while i<=n:\r\n        total = combiner(term(i))+base\r\n        total = combiner(term(i), total)\r\n        i += 1\r\n    return total", 
    "removed": [
      1, 
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    i, total = 1, 1\r\n    while i<=n:\r\n        total = combiner(term(i))+base\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      7, 
      8, 
      9, 
      10, 
      11, 
      12
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    end = base\r\n    while n>=0:\r\n        if n==0:\r\n            return end\r\n        else:\r\n            end = combiner(end, term(n))\r\n            n -= 1\r\n    return end", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            128
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            150
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    end = base\r\n    if n==0:\r\n        return end\r\n    elif n>0:\r\n        end = combiner(end, term(n))\r\n        n -= 1\r\n    while n>=0:\r\n        if n==0:\r\n            return end\r\n        else:\r\n            end = combiner(end, term(n))\r\n            n -= 1\r\n    return end", 
    "removed": [
      2, 
      3, 
      4, 
      5, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    end = base\r\n    if n==0:\r\n        return end\r\n    elif n>0:\r\n        end = combiner(end, term(n))\r\n        n -= 1\r\n    return end"
  }, 
  {
    "added": [
      3, 
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n0\n\n# Error: expected\n#     72\n# but got\n#     0", 
    "after": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    y = base\r\n    while x<=n:\r\n        y = combiner(y, term(x))\r\n        x += 1\r\n    return y", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            147
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "stack_locals": [], 
        "line": 8, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 8, 
        "globals": {
          "accumulate": [
            "REF", 
            149
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 0, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    y = 0\r\n    y = base\r\n    while x<=n:\r\n        y = combiner(y, term(x))\r\n        x += 1\r\n    return combiner(base, y)\r\nfrom operator import add, mul    return y", 
    "removed": [
      2, 
      7, 
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    x = 1\r\n    y = 0\r\n    while x<=n:\r\n        y = combiner(y, term(x))\r\n        x += 1\r\n    return combiner(base, y)\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 40, in accumulated_terms\n    return combiner(term(n), accumulated_terms(n-1))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulated_terms\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    start_term = combiner(base, n)\r\n    if n==0:\r\n        return base\r\n    def accumulated_terms(n):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), accumulated_terms(n-1))\r\n    return combiner(base, accumulated_terms(n))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            135
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            131
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    start_term = combiner(base, n)\r\n    if n==0:\r\n        return base\r\n    def accumulated_terms(n):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), accumulated_terms(n-1))\r\n    return combiner(base, accumulated_terms(n))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    start_term = combiner(base, n)\r\n    def accumulated_terms(n):\r\n        if n==1:\r\n            return term(n)\r\n        return combiner(term(n), accumulated_terms(n-1))\r\n    return combiner(base, accumulated_terms(n))"
  }, 
  {
    "added": [
      3, 
      4, 
      5, 
      8
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total= combiner(total,term(k))\nNameError: name 'k' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        k += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            142
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            145
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    while base<=n:\r\n    total = base\r\n    k = 1\r\n    while k<=n:\r\n        total = combiner(total, term(k))\r\n        base += 1\r\n        k += 1\r\n    return total", 
    "removed": [
      1, 
      2, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = 1\r\n    while base<=n:\r\n        total = combiner(total, term(k))\r\n        base += 1\r\n    return total"
  }, 
  {
    "added": [
      9
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n38\n\n# Error: expected\n#     72\n# but got\n#     38", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    if combiner==add:\r\n        total = 0\r\n    elif combiner==mul:\r\n        total = 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            1
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 38, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    if combiner==add:\r\n        total = 0\r\n    elif combiner==mul:\r\n        total = 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return base+total    return combiner(base, total)", 
    "removed": [
      8
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    if combiner==add:\r\n        total = 0\r\n    elif combiner==mul:\r\n        total = 1\r\n    while k<=n:\r\n        total, k = combiner(total, term(k)), k+1\r\n    return base+total"
  }, 
  {
    "added": [
      2, 
      8
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n135\n\n# Error: expected\n#     25\n# but got\n#     135", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    while n>=1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            48
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "ImportError: __import__ not found", 
        "func_name": "<module>", 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "stack_locals": [], 
        "line": 7, 
        "event": "exception"
      }, 
      {
        "func_name": "<module>", 
        "line": 7, 
        "globals": {
          "accumulate": [
            "REF", 
            46
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }, 
      {
        "exception_msg": "Unknown error", 
        "event": "uncaught_exception"
      }
    ], 
    "result": 135, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = term(base)\r\n    total = base\r\n    while n>=1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total\r\nfrom operator import add, mul    return total", 
    "removed": [
      1, 
      6, 
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = term(base)\r\n    while n>=1:\r\n        total = combiner(total, term(n))\r\n        n -= 1\r\n    return total\r\nfrom operator import add, mul"
  }, 
  {
    "added": [
      6, 
      7, 
      8, 
      9
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n25\n\n# Error: expected\n#     15\n# but got\n#     25", 
    "after": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    k = 1\r\n    while k<=n:\r\n        start = combiner(start, term(k))\r\n        k += 1\r\n    return start", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            44
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            80
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 25, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    count = 1\r\n    while count<=n:\r\n        start = combiner(start, term(n))\r\n        count += 1\r\n    k = 1\r\n    while k<=n:\r\n        start = combiner(start, term(k))\r\n        k += 1\r\n    return start", 
    "removed": [
      2, 
      3, 
      4, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    start = base\r\n    count = 1\r\n    while count<=n:\r\n        start = combiner(start, term(n))\r\n        count += 1\r\n    return start"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n5\n4\n3\n2\n1\n15\n\n# Error: expected\n#     15\n# but got\n#     5", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        print(combiner(base, term(n)))\r\n        return combiner(base, term(n))\r\n    else:\r\n        print(term(n))\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            78
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            43
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 5, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        print(combiner(base, term(n)))\r\n        return combiner(base, term(n))\r\n    else:\r\n        print(term(n))\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        print(combiner(base, term(n)))\r\n        return combiner(base, term(n))\r\n    else:\r\n        print(term(n))\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n# Error: evaluation exceeded 10 seconds.\n\n# Error: expected\n#     15\n# but got\n#     Timeout", 
    "after": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    while n>0:\r\n        result = combiner(result, term(n))\r\n        n -= 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            72
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            40
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    while n>0:\r\n        result = combiner(result, term(n))\r\n        n += 1\r\n        n -= 1\r\n    return result", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    result = base\r\n    while n>0:\r\n        result = combiner(result, term(n))\r\n        n += 1\r\n    return result"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n108\n\n# Error: expected\n#     72\n# but got\n#     108", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if combiner==1:\r\n        return term(1)+base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 108, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n    if combiner==1:\r\n        return term(1)+base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return term(1)+base\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n<=1:\r\n        return combiner(term(1), base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            180
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n<=1:\r\n        return combiner(term(1), base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n<=1:\r\n        return combiner(term(1), base)\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 37, in accumulate\n    else: return combiner(term(n),accumulate(combiner,base,n-1,term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n==base: return base\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     26\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            178
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            179
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==base:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n15\n\n# Error: expected\n#     26\n# but got\n#     15", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif combiner==1:\r\n        return term(1)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            159
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 26, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            169
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 15, 
    "test": "accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n    elif combiner==1:\r\n        return term(1)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return term(1)\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      8
    ], 
    "log": ">>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n28\n\n# Error: expected\n#     72\n# but got\n#     28", 
    "after": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==0:\r\n            return 0\r\n        elif n<=1:\r\n            return 1\r\n        else:\r\n            return combiner(term(n), helper(n-1, term))\r\n    return combiner(base, helper(n, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            181
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 72, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            154
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 28, 
    "test": "accumulate(mul, 2, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==0:\r\n            return 0\r\n        elif n<=1:\r\n            return 1\r\n        else:\r\n            return term(n)+helper(n-1, term)\r\n            return combiner(term(n), helper(n-1, term))\r\n    return combiner(base, helper(n, term))", 
    "removed": [
      7
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    def helper(n, term):\r\n        if n==0:\r\n            return 0\r\n        elif n<=1:\r\n            return 1\r\n        else:\r\n            return term(n)+helper(n-1, term)\r\n    return combiner(base, helper(n, term))"
  }, 
  {
    "added": [
      2, 
      6
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n>=1:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)\r\n    else:\r\n        return base", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            161
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            172
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n>=2:\r\n    if n>=1:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)\r\n    else:\r\n        return 1        return base", 
    "removed": [
      1, 
      5
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n>=2:\r\n        return accumulate(combiner, combiner(base, term(n)), n-1, term)\r\n    else:\r\n        return 1"
  }, 
  {
    "added": [
      1, 
      2
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\nTraceback (most recent call last):\n  ...\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return combiner(term(n), accumulate(combiner, base, n-1, term))\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 36, in accumulate\n    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n\n# Error: expected\n#     11\n# but got\n#     RecursionError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            2
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            182
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==1:\r\n        return combiner(base, term(1))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n1\n\n# Error: expected\n#     15\n# but got\n#     1", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            73
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            3
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 1, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(base, accumulate(combiner, base, n-1, term))    return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      1, 
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    from operator import add, mul\r\n    if n==0:\r\n        return base\r\n    if n==1:\r\n        return combiner(base, term(n))\r\n    return combiner(base, accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    return cominer( term(n), accumulate(combiner, base, n-1, term))\nNameError: name 'cominer' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            39
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            38
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return cominer(term(n), accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    else:\r\n        return cominer(term(n), accumulate(combiner, base, n-1, term))"
  }, 
  {
    "added": [
      2, 
      3
    ], 
    "log": ">>> accumulate(add, 11, 0, identity) # 11\n12\n\n# Error: expected\n#     11\n# but got\n#     12", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total, i = 1, 1\r\n    if n==0:\r\n        return base\r\n    while i<n:\r\n        total = combiner(total, term(i+1))\r\n        i += 1\r\n    return combiner(base, total)", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            76
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 11, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            45
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 12, 
    "test": "accumulate(add, 11, 0, identity) # 11", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total, i = 1, 1\r\n    if n==0:\r\n        return base\r\n    while i<n:\r\n        total = combiner(total, term(i+1))\r\n        i += 1\r\n    return combiner(base, total)", 
    "removed": [], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total, i = 1, 1\r\n    while i<n:\r\n        total = combiner(total, term(i+1))\r\n        i += 1\r\n    return combiner(base, total)"
  }, 
  {
    "added": [
      3, 
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n16\n\n# Error: expected\n#     15\n# but got\n#     16", 
    "after": "def accumulate(combiner, base, n, term):\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            79
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            74
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 16, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    result = 1\r\n    k = 1\r\n    result = base\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result", 
    "removed": [
      1, 
      2
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    k = base\r\n    result = 1\r\n    while k<=n:\r\n        result = combiner(result, term(k))\r\n        k += 1\r\n    return result"
  }, 
  {
    "added": [
      5
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 39, in accumulate\n    total = combiner(term(i))\nTypeError: op_add expected 2 arguments, got 1\n\n# Error: expected\n#     15\n# but got\n#     TypeError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            50
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            49
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(term(i))\r\n        total = combiner(total, term(i))\r\n        i += 1\r\n    return total", 
    "removed": [
      4
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    total = base\r\n    i = 1\r\n    while i<=n:\r\n        total = combiner(term(i))\r\n        i += 1\r\n    return total"
  }, 
  {
    "added": [
      4
    ], 
    "log": ">>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\nTraceback (most recent call last):\n  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 38, in accumulate\n    elif(i == n):\nNameError: name 'i' is not defined\n\n# Error: expected\n#     15\n# but got\n#     NameError", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    elif (combiner==n):\r\n        return term(i)\r\n    elif (combiner==mul):\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 1, n-1, term)))\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            51
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 15, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            47
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": null, 
    "test": "accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    elif (i==n):\r\n    elif (combiner==n):\r\n        return term(i)\r\n    elif (combiner==mul):\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 1, n-1, term)))\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))", 
    "removed": [
      3
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if (n==0):\r\n        return base\r\n    elif (i==n):\r\n        return term(i)\r\n    elif (combiner==mul):\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 1, n-1, term)))\r\n    else:\r\n        return combiner(base, combiner(term(n), accumulate(combiner, 0, n-1, term)))"
  }, 
  {
    "added": [
      7
    ], 
    "log": ">>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n17\n\n# Error: expected\n#     25\n# but got\n#     17", 
    "after": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "after_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            71
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "expected": 25, 
    "before_traces": [
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {}, 
        "event": "step_line", 
        "stack_locals": []
      }, 
      {
        "func_name": "<module>", 
        "line": 1, 
        "globals": {
          "accumulate": [
            "REF", 
            81
          ]
        }, 
        "event": "return", 
        "stack_locals": []
      }
    ], 
    "result": 17, 
    "test": "accumulate(add, 11, 3, square)", 
    "diff": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))        return combiner(term(n), accumulate(combiner, base, n-1, term))", 
    "removed": [
      6
    ], 
    "before": "def accumulate(combiner, base, n, term):\r\n    if n==0:\r\n        return base\r\n    elif n==1:\r\n        return combiner(base, term(n))\r\n    else:\r\n        return combiner(n, accumulate(combiner, base, n-1, term))"
  }
]